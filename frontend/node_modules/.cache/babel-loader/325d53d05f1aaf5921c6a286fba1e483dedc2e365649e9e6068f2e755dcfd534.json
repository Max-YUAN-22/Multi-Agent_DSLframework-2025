{"ast":null,"code":"import _objectSpread from\"/Users/Apple/Desktop/multi-agent-dsl-final/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// frontend/src/components/WebSocketConnectionPool.js\nimport{io}from'socket.io-client';class WebSocketConnectionPool{constructor(){this.connections=new Map();this.defaultConfig={transports:['websocket','polling'],timeout:20000,forceNew:true,reconnection:true,reconnectionAttempts:5,reconnectionDelay:1000,autoConnect:true};this.maxConnections=3;// 每个用户最多3个连接\nthis.userId=this.generateUserId();}generateUserId(){// 生成唯一用户ID，可以基于浏览器指纹或其他方式\nlet userId=localStorage.getItem('websocket_user_id');if(!userId){userId=\"user_\".concat(Date.now(),\"_\").concat(Math.random().toString(36).substr(2,9));localStorage.setItem('websocket_user_id',userId);}return userId;}createConnection(url){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const connectionId=\"conn_\".concat(Date.now(),\"_\").concat(Math.random().toString(36).substr(2,5));const config=_objectSpread(_objectSpread({},this.defaultConfig),options);// 添加用户ID到连接参数\nconst connectionUrl=\"\".concat(url,\"?user_id=\").concat(this.userId,\"&connection_id=\").concat(connectionId);console.log(\"\\uD83D\\uDD0C \\u521B\\u5EFA\\u65B0\\u8FDE\\u63A5: \".concat(connectionId,\" for user: \").concat(this.userId));const socket=io(connectionUrl,config);// 设置连接元数据\nsocket.connectionId=connectionId;socket.userId=this.userId;socket.createdAt=new Date();socket.isActive=true;// 添加事件监听器\nthis.setupConnectionListeners(socket,connectionId);// 存储连接\nthis.connections.set(connectionId,socket);// 检查连接数限制\nthis.enforceConnectionLimit();return{connectionId,socket};}setupConnectionListeners(socket,connectionId){var _this=this;socket.on('connect',()=>{var _this$onConnectionSuc;console.log(\"\\u2705 \\u8FDE\\u63A5\\u6210\\u529F: \".concat(connectionId));socket.isActive=true;(_this$onConnectionSuc=this.onConnectionSuccess)===null||_this$onConnectionSuc===void 0?void 0:_this$onConnectionSuc.call(this,connectionId,socket);});socket.on('disconnect',reason=>{var _this$onConnectionLos;console.log(\"\\u274C \\u8FDE\\u63A5\\u65AD\\u5F00: \".concat(connectionId,\", \\u539F\\u56E0: \").concat(reason));socket.isActive=false;(_this$onConnectionLos=this.onConnectionLost)===null||_this$onConnectionLos===void 0?void 0:_this$onConnectionLos.call(this,connectionId,socket,reason);});socket.on('connect_error',error=>{var _this$onConnectionErr;console.error(\"\\u274C \\u8FDE\\u63A5\\u9519\\u8BEF: \".concat(connectionId),error);socket.isActive=false;(_this$onConnectionErr=this.onConnectionError)===null||_this$onConnectionErr===void 0?void 0:_this$onConnectionErr.call(this,connectionId,socket,error);});socket.on('reconnect',attemptNumber=>{var _this$onReconnectionS;console.log(\"\\uD83D\\uDD04 \\u91CD\\u8FDE\\u6210\\u529F: \".concat(connectionId,\", \\u5C1D\\u8BD5\\u6B21\\u6570: \").concat(attemptNumber));socket.isActive=true;(_this$onReconnectionS=this.onReconnectionSuccess)===null||_this$onReconnectionS===void 0?void 0:_this$onReconnectionS.call(this,connectionId,socket,attemptNumber);});socket.on('reconnect_error',error=>{var _this$onReconnectionE;console.error(\"\\u274C \\u91CD\\u8FDE\\u5931\\u8D25: \".concat(connectionId),error);(_this$onReconnectionE=this.onReconnectionError)===null||_this$onReconnectionE===void 0?void 0:_this$onReconnectionE.call(this,connectionId,socket,error);});socket.on('connection_successful',data=>{var _this$onConnectionCon;console.log(\"\\uD83C\\uDF89 \\u6536\\u5230\\u8FDE\\u63A5\\u786E\\u8BA4: \".concat(connectionId),data);(_this$onConnectionCon=this.onConnectionConfirmed)===null||_this$onConnectionCon===void 0?void 0:_this$onConnectionCon.call(this,connectionId,socket,data);});socket.on('server_stats',stats=>{var _this$onServerStats;console.log(\"\\uD83D\\uDCCA \\u670D\\u52A1\\u5668\\u7EDF\\u8BA1: \".concat(connectionId),stats);(_this$onServerStats=this.onServerStats)===null||_this$onServerStats===void 0?void 0:_this$onServerStats.call(this,connectionId,socket,stats);});// 监听所有消息\nsocket.onAny(function(eventName){var _this$onMessage;for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}console.log(\"\\uD83D\\uDCE8 \\u6536\\u5230\\u6D88\\u606F [\".concat(connectionId,\"]:\"),eventName,args);(_this$onMessage=_this.onMessage)===null||_this$onMessage===void 0?void 0:_this$onMessage.call(_this,connectionId,socket,eventName,args);});}enforceConnectionLimit(){const activeConnections=Array.from(this.connections.values()).filter(conn=>conn.isActive);if(activeConnections.length>this.maxConnections){// 关闭最旧的连接\nconst oldestConnection=activeConnections.sort((a,b)=>a.createdAt-b.createdAt)[0];console.log(\"\\u26A0\\uFE0F \\u8D85\\u8FC7\\u8FDE\\u63A5\\u9650\\u5236\\uFF0C\\u5173\\u95ED\\u6700\\u65E7\\u8FDE\\u63A5: \".concat(oldestConnection.connectionId));this.closeConnection(oldestConnection.connectionId);}}getActiveConnection(){const activeConnections=Array.from(this.connections.values()).filter(conn=>conn.isActive&&conn.connected);if(activeConnections.length>0){// 返回最新的活跃连接\nreturn activeConnections.sort((a,b)=>b.createdAt-a.createdAt)[0];}return null;}getAllActiveConnections(){return Array.from(this.connections.values()).filter(conn=>conn.isActive&&conn.connected);}closeConnection(connectionId){const socket=this.connections.get(connectionId);if(socket){console.log(\"\\uD83D\\uDD0C \\u5173\\u95ED\\u8FDE\\u63A5: \".concat(connectionId));socket.disconnect();this.connections.delete(connectionId);}}closeAllConnections(){console.log('🔌 关闭所有连接');this.connections.forEach((socket,connectionId)=>{socket.disconnect();});this.connections.clear();}reconnectAll(){console.log('🔄 重连所有连接');this.connections.forEach((socket,connectionId)=>{if(!socket.connected){socket.connect();}});}getConnectionStats(){const activeConnections=Array.from(this.connections.values()).filter(conn=>conn.isActive&&conn.connected);return{totalConnections:this.connections.size,activeConnections:activeConnections.length,userId:this.userId,connections:activeConnections.map(conn=>({connectionId:conn.connectionId,connected:conn.connected,createdAt:conn.createdAt}))};}// 事件回调设置方法\nsetEventHandlers(handlers){this.onConnectionSuccess=handlers.onConnectionSuccess;this.onConnectionLost=handlers.onConnectionLost;this.onConnectionError=handlers.onConnectionError;this.onReconnectionSuccess=handlers.onReconnectionSuccess;this.onReconnectionError=handlers.onReconnectionError;this.onConnectionConfirmed=handlers.onConnectionConfirmed;this.onServerStats=handlers.onServerStats;this.onMessage=handlers.onMessage;}}// 全局连接池实例\nconst connectionPool=new WebSocketConnectionPool();export default connectionPool;","map":{"version":3,"names":["io","WebSocketConnectionPool","constructor","connections","Map","defaultConfig","transports","timeout","forceNew","reconnection","reconnectionAttempts","reconnectionDelay","autoConnect","maxConnections","userId","generateUserId","localStorage","getItem","concat","Date","now","Math","random","toString","substr","setItem","createConnection","url","options","arguments","length","undefined","connectionId","config","_objectSpread","connectionUrl","console","log","socket","createdAt","isActive","setupConnectionListeners","set","enforceConnectionLimit","_this","on","_this$onConnectionSuc","onConnectionSuccess","call","reason","_this$onConnectionLos","onConnectionLost","error","_this$onConnectionErr","onConnectionError","attemptNumber","_this$onReconnectionS","onReconnectionSuccess","_this$onReconnectionE","onReconnectionError","data","_this$onConnectionCon","onConnectionConfirmed","stats","_this$onServerStats","onServerStats","onAny","eventName","_this$onMessage","_len","args","Array","_key","onMessage","activeConnections","from","values","filter","conn","oldestConnection","sort","a","b","closeConnection","getActiveConnection","connected","getAllActiveConnections","get","disconnect","delete","closeAllConnections","forEach","clear","reconnectAll","connect","getConnectionStats","totalConnections","size","map","setEventHandlers","handlers","connectionPool"],"sources":["/Users/Apple/Desktop/multi-agent-dsl-final/frontend/src/components/WebSocketConnectionPool.js"],"sourcesContent":["// frontend/src/components/WebSocketConnectionPool.js\nimport { io } from 'socket.io-client';\n\nclass WebSocketConnectionPool {\n  constructor() {\n    this.connections = new Map();\n    this.defaultConfig = {\n      transports: ['websocket', 'polling'],\n      timeout: 20000,\n      forceNew: true,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      autoConnect: true\n    };\n    this.maxConnections = 3; // 每个用户最多3个连接\n    this.userId = this.generateUserId();\n  }\n\n  generateUserId() {\n    // 生成唯一用户ID，可以基于浏览器指纹或其他方式\n    let userId = localStorage.getItem('websocket_user_id');\n    if (!userId) {\n      userId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      localStorage.setItem('websocket_user_id', userId);\n    }\n    return userId;\n  }\n\n  createConnection(url, options = {}) {\n    const connectionId = `conn_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`;\n    const config = { ...this.defaultConfig, ...options };\n    \n    // 添加用户ID到连接参数\n    const connectionUrl = `${url}?user_id=${this.userId}&connection_id=${connectionId}`;\n    \n    console.log(`🔌 创建新连接: ${connectionId} for user: ${this.userId}`);\n    \n    const socket = io(connectionUrl, config);\n    \n    // 设置连接元数据\n    socket.connectionId = connectionId;\n    socket.userId = this.userId;\n    socket.createdAt = new Date();\n    socket.isActive = true;\n    \n    // 添加事件监听器\n    this.setupConnectionListeners(socket, connectionId);\n    \n    // 存储连接\n    this.connections.set(connectionId, socket);\n    \n    // 检查连接数限制\n    this.enforceConnectionLimit();\n    \n    return { connectionId, socket };\n  }\n\n  setupConnectionListeners(socket, connectionId) {\n    socket.on('connect', () => {\n      console.log(`✅ 连接成功: ${connectionId}`);\n      socket.isActive = true;\n      this.onConnectionSuccess?.(connectionId, socket);\n    });\n\n    socket.on('disconnect', (reason) => {\n      console.log(`❌ 连接断开: ${connectionId}, 原因: ${reason}`);\n      socket.isActive = false;\n      this.onConnectionLost?.(connectionId, socket, reason);\n    });\n\n    socket.on('connect_error', (error) => {\n      console.error(`❌ 连接错误: ${connectionId}`, error);\n      socket.isActive = false;\n      this.onConnectionError?.(connectionId, socket, error);\n    });\n\n    socket.on('reconnect', (attemptNumber) => {\n      console.log(`🔄 重连成功: ${connectionId}, 尝试次数: ${attemptNumber}`);\n      socket.isActive = true;\n      this.onReconnectionSuccess?.(connectionId, socket, attemptNumber);\n    });\n\n    socket.on('reconnect_error', (error) => {\n      console.error(`❌ 重连失败: ${connectionId}`, error);\n      this.onReconnectionError?.(connectionId, socket, error);\n    });\n\n    socket.on('connection_successful', (data) => {\n      console.log(`🎉 收到连接确认: ${connectionId}`, data);\n      this.onConnectionConfirmed?.(connectionId, socket, data);\n    });\n\n    socket.on('server_stats', (stats) => {\n      console.log(`📊 服务器统计: ${connectionId}`, stats);\n      this.onServerStats?.(connectionId, socket, stats);\n    });\n\n    // 监听所有消息\n    socket.onAny((eventName, ...args) => {\n      console.log(`📨 收到消息 [${connectionId}]:`, eventName, args);\n      this.onMessage?.(connectionId, socket, eventName, args);\n    });\n  }\n\n  enforceConnectionLimit() {\n    const activeConnections = Array.from(this.connections.values())\n      .filter(conn => conn.isActive);\n    \n    if (activeConnections.length > this.maxConnections) {\n      // 关闭最旧的连接\n      const oldestConnection = activeConnections\n        .sort((a, b) => a.createdAt - b.createdAt)[0];\n      \n      console.log(`⚠️ 超过连接限制，关闭最旧连接: ${oldestConnection.connectionId}`);\n      this.closeConnection(oldestConnection.connectionId);\n    }\n  }\n\n  getActiveConnection() {\n    const activeConnections = Array.from(this.connections.values())\n      .filter(conn => conn.isActive && conn.connected);\n    \n    if (activeConnections.length > 0) {\n      // 返回最新的活跃连接\n      return activeConnections.sort((a, b) => b.createdAt - a.createdAt)[0];\n    }\n    return null;\n  }\n\n  getAllActiveConnections() {\n    return Array.from(this.connections.values())\n      .filter(conn => conn.isActive && conn.connected);\n  }\n\n  closeConnection(connectionId) {\n    const socket = this.connections.get(connectionId);\n    if (socket) {\n      console.log(`🔌 关闭连接: ${connectionId}`);\n      socket.disconnect();\n      this.connections.delete(connectionId);\n    }\n  }\n\n  closeAllConnections() {\n    console.log('🔌 关闭所有连接');\n    this.connections.forEach((socket, connectionId) => {\n      socket.disconnect();\n    });\n    this.connections.clear();\n  }\n\n  reconnectAll() {\n    console.log('🔄 重连所有连接');\n    this.connections.forEach((socket, connectionId) => {\n      if (!socket.connected) {\n        socket.connect();\n      }\n    });\n  }\n\n  getConnectionStats() {\n    const activeConnections = Array.from(this.connections.values())\n      .filter(conn => conn.isActive && conn.connected);\n    \n    return {\n      totalConnections: this.connections.size,\n      activeConnections: activeConnections.length,\n      userId: this.userId,\n      connections: activeConnections.map(conn => ({\n        connectionId: conn.connectionId,\n        connected: conn.connected,\n        createdAt: conn.createdAt\n      }))\n    };\n  }\n\n  // 事件回调设置方法\n  setEventHandlers(handlers) {\n    this.onConnectionSuccess = handlers.onConnectionSuccess;\n    this.onConnectionLost = handlers.onConnectionLost;\n    this.onConnectionError = handlers.onConnectionError;\n    this.onReconnectionSuccess = handlers.onReconnectionSuccess;\n    this.onReconnectionError = handlers.onReconnectionError;\n    this.onConnectionConfirmed = handlers.onConnectionConfirmed;\n    this.onServerStats = handlers.onServerStats;\n    this.onMessage = handlers.onMessage;\n  }\n}\n\n// 全局连接池实例\nconst connectionPool = new WebSocketConnectionPool();\nexport default connectionPool;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}