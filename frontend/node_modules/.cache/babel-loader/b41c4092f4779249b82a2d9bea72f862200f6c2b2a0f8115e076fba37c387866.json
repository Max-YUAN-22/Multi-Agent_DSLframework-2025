{"ast":null,"code":"import _objectSpread from\"/Users/Apple/Desktop/multi-agent-dsl-final/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import PageHeader from'../components/PageHeader';import AgentArchitecture from'../components/AgentArchitecture';import AutonomousDrivingCard from'../components/AutonomousDrivingCard';import WeatherAlertCard from'../components/WeatherAlertCard';import ParkingUpdateCard from'../components/ParkingUpdateCard';import SafetyInspectionCard from'../components/SafetyInspectionCard';import InteractionHistory from'../components/InteractionHistory';import ReportSidebar from'../components/ReportSidebar';import SimpleWebSocketService from'../components/SimpleWebSocketService';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const HomePage=()=>{const[messages,setMessages]=useState([]);const[readyState,setReadyState]=useState(0);// 0 = connecting, 1 = open, 2 = closing, 3 = closed\nconst[connectionStats,setConnectionStats]=useState(null);const[isReportSidebarOpen,setIsReportSidebarOpen]=useState(false);const[showReportsOnly,setShowReportsOnly]=useState(false);const[connectionError,setConnectionError]=useState(null);const[isRetrying,setIsRetrying]=useState(false);useEffect(()=>{const wsUrl=\"http://localhost:8008\";console.log('🔌 尝试连接到:',wsUrl);SimpleWebSocketService.connect(wsUrl);const handleConnect=()=>{setReadyState(1);// WebSocket.OPEN\nsetConnectionError(null);setIsRetrying(false);console.log('✅ WebSocket connected, readyState set to 1');// 更新连接统计信息\nsetConnectionStats(SimpleWebSocketService.getConnectionStats());};const handleDisconnect=()=>{setReadyState(3);// WebSocket.CLOSED\nconsole.log('❌ WebSocket disconnected, readyState set to 3');};const handleMessage=data=>{try{console.log('📨 Received WebSocket message:',data);const message=typeof data==='string'?JSON.parse(data):data;const messageWithTimestamp=_objectSpread(_objectSpread({},message),{},{timestamp:message.timestamp||new Date().toISOString()});console.log('📝 Adding message to state:',messageWithTimestamp);// 特别关注报告消息\nif(messageWithTimestamp.type==='analysis_report'){console.log('📊 Report message received:',messageWithTimestamp);}setMessages(prevMessages=>[...prevMessages,messageWithTimestamp]);}catch(error){console.error('❌ Error parsing WebSocket message:',error);setMessages(prevMessages=>[...prevMessages,{type:'raw',payload:data,timestamp:new Date().toISOString()}]);}};const handleError=error=>{console.error('❌ WebSocket error:',error);setReadyState(3);// WebSocket.CLOSED\nsetConnectionError(error.message||'连接失败');setIsRetrying(false);};SimpleWebSocketService.on('connect',handleConnect);SimpleWebSocketService.on('disconnect',handleDisconnect);SimpleWebSocketService.on('message',handleMessage);SimpleWebSocketService.on('error',handleError);return()=>{console.log('🧹 Cleaning up WebSocket connection');SimpleWebSocketService.disconnect();};},[]);const handleSend=async(task,data)=>{try{console.log('Sending task:',task,'with data:',data,'readyState:',readyState);// 根据任务类型发送到对应的API端点\nlet endpoint='';let payload=data;switch(task){case'autonomous_driving_task':endpoint='/events/autonomous_driving';payload={start_location:data.start_location||'A',end_location:data.end_location||'B',passengers:data.passengers||2};break;case'weather_alert_task':endpoint='/events/weather_alert';payload={area:data.location||'City Center',alert_type:data.alert_type||'heavy_rain',severity:data.severity||8};break;case'parking_update_task':endpoint='/events/parking_update';payload={location:data.location||'City Center Parking',available_spots:data.available_spots||150};break;case'safety_inspection_task':endpoint='/events/safety_inspection';payload={location:data.location||'Bridge B',safety_status:data.require_human_intervention?'warning':'ok',require_human_intervention:data.require_human_intervention||true};break;default:console.error('Unknown task type:',task);return;}const response=await fetch(\"http://localhost:8008\".concat(endpoint),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)});if(response.ok){console.log('Task sent successfully');}else{console.error('Failed to send task:',response.statusText);}}catch(error){console.error('Error sending task:',error);}};const sendGenerateReport=async()=>{try{console.log('Generating report...');// 获取最近的交互记录\nconst recentEvents=messages.slice(-5).map(msg=>({type:msg.type,payload:msg.payload,title:msg.title,timestamp:msg.timestamp}));const response=await fetch('http://localhost:8008/generate-report',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({events:recentEvents})});if(response.ok){console.log('Report generation started');}else{console.error('Failed to generate report:',response.statusText);}}catch(error){console.error('Error generating report:',error);}};const clearHistory=()=>{setMessages([]);};// 手动重连功能\nconst handleRetryConnection=()=>{setIsRetrying(true);setConnectionError(null);console.log('🔄 手动重连WebSocket');SimpleWebSocketService.reconnect();// 5秒后如果还在重试状态，显示错误\nsetTimeout(()=>{if(isRetrying){setIsRetrying(false);setConnectionError('重连超时，请检查服务器状态');}},5000);};// 报告侧边栏控制函数\nconst openReportSidebar=()=>{setIsReportSidebarOpen(true);};const closeReportSidebar=()=>{setIsReportSidebarOpen(false);};// 切换报告显示模式\nconst toggleReportsOnly=()=>{setShowReportsOnly(!showReportsOnly);};return/*#__PURE__*/_jsxs(\"div\",{className:\"homepage\",children:[/*#__PURE__*/_jsx(PageHeader,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(AgentArchitecture,{}),/*#__PURE__*/_jsx(\"div\",{className:\"event-cards-section\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-2\",children:[/*#__PURE__*/_jsx(AutonomousDrivingCard,{onSend:data=>handleSend('autonomous_driving_task',data),readyState:readyState}),/*#__PURE__*/_jsx(WeatherAlertCard,{onSend:data=>handleSend('weather_alert_task',data),readyState:readyState}),/*#__PURE__*/_jsx(ParkingUpdateCard,{onSend:data=>handleSend('parking_update_task',data),readyState:readyState}),/*#__PURE__*/_jsx(SafetyInspectionCard,{onSend:data=>handleSend('safety_inspection_task',data),readyState:readyState})]})}),/*#__PURE__*/_jsx(InteractionHistory,{events:messages,readyState:readyState,connectionStats:connectionStats,connectionError:connectionError,isRetrying:isRetrying,onGenerateReport:sendGenerateReport,onClear:clearHistory,onOpenReportSidebar:openReportSidebar,onRetryConnection:handleRetryConnection,showReportsOnly:showReportsOnly,onToggleReportsOnly:toggleReportsOnly})]}),/*#__PURE__*/_jsx(ReportSidebar,{events:messages,isOpen:isReportSidebarOpen,onClose:closeReportSidebar,onGenerateReport:sendGenerateReport})]});};export default HomePage;","map":{"version":3,"names":["React","useState","useEffect","PageHeader","AgentArchitecture","AutonomousDrivingCard","WeatherAlertCard","ParkingUpdateCard","SafetyInspectionCard","InteractionHistory","ReportSidebar","SimpleWebSocketService","jsx","_jsx","jsxs","_jsxs","HomePage","messages","setMessages","readyState","setReadyState","connectionStats","setConnectionStats","isReportSidebarOpen","setIsReportSidebarOpen","showReportsOnly","setShowReportsOnly","connectionError","setConnectionError","isRetrying","setIsRetrying","wsUrl","console","log","connect","handleConnect","getConnectionStats","handleDisconnect","handleMessage","data","message","JSON","parse","messageWithTimestamp","_objectSpread","timestamp","Date","toISOString","type","prevMessages","error","payload","handleError","on","disconnect","handleSend","task","endpoint","start_location","end_location","passengers","area","location","alert_type","severity","available_spots","safety_status","require_human_intervention","response","fetch","concat","method","headers","body","stringify","ok","statusText","sendGenerateReport","recentEvents","slice","map","msg","title","events","clearHistory","handleRetryConnection","reconnect","setTimeout","openReportSidebar","closeReportSidebar","toggleReportsOnly","className","children","onSend","onGenerateReport","onClear","onOpenReportSidebar","onRetryConnection","onToggleReportsOnly","isOpen","onClose"],"sources":["/Users/Apple/Desktop/multi-agent-dsl-final/frontend/src/pages/HomePage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PageHeader from '../components/PageHeader';\nimport AgentArchitecture from '../components/AgentArchitecture';\nimport AutonomousDrivingCard from '../components/AutonomousDrivingCard';\nimport WeatherAlertCard from '../components/WeatherAlertCard';\nimport ParkingUpdateCard from '../components/ParkingUpdateCard';\nimport SafetyInspectionCard from '../components/SafetyInspectionCard';\nimport InteractionHistory from '../components/InteractionHistory';\nimport ReportSidebar from '../components/ReportSidebar';\nimport SimpleWebSocketService from '../components/SimpleWebSocketService';\n\nconst HomePage = () => {\n  const [messages, setMessages] = useState([]);\n  const [readyState, setReadyState] = useState(0); // 0 = connecting, 1 = open, 2 = closing, 3 = closed\n  const [connectionStats, setConnectionStats] = useState(null);\n  const [isReportSidebarOpen, setIsReportSidebarOpen] = useState(false);\n  const [showReportsOnly, setShowReportsOnly] = useState(false);\n  const [connectionError, setConnectionError] = useState(null);\n  const [isRetrying, setIsRetrying] = useState(false);\n\n  useEffect(() => {\n    const wsUrl = `http://localhost:8008`;\n    console.log('🔌 尝试连接到:', wsUrl);\n    SimpleWebSocketService.connect(wsUrl);\n\n    const handleConnect = () => {\n      setReadyState(1); // WebSocket.OPEN\n      setConnectionError(null);\n      setIsRetrying(false);\n      console.log('✅ WebSocket connected, readyState set to 1');\n      // 更新连接统计信息\n      setConnectionStats(SimpleWebSocketService.getConnectionStats());\n    };\n\n    const handleDisconnect = () => {\n      setReadyState(3); // WebSocket.CLOSED\n      console.log('❌ WebSocket disconnected, readyState set to 3');\n    };\n\n    const handleMessage = (data) => {\n      try {\n        console.log('📨 Received WebSocket message:', data);\n        const message = typeof data === 'string' ? JSON.parse(data) : data;\n        const messageWithTimestamp = {\n          ...message,\n          timestamp: message.timestamp || new Date().toISOString()\n        };\n        console.log('📝 Adding message to state:', messageWithTimestamp);\n        \n        // 特别关注报告消息\n        if (messageWithTimestamp.type === 'analysis_report') {\n          console.log('📊 Report message received:', messageWithTimestamp);\n        }\n        \n        setMessages((prevMessages) => [...prevMessages, messageWithTimestamp]);\n      } catch (error) {\n        console.error('❌ Error parsing WebSocket message:', error);\n        setMessages((prevMessages) => [...prevMessages, { \n          type: 'raw', \n          payload: data, \n          timestamp: new Date().toISOString() \n        }]);\n      }\n    };\n\n    const handleError = (error) => {\n      console.error('❌ WebSocket error:', error);\n      setReadyState(3); // WebSocket.CLOSED\n      setConnectionError(error.message || '连接失败');\n      setIsRetrying(false);\n    };\n\n    SimpleWebSocketService.on('connect', handleConnect);\n    SimpleWebSocketService.on('disconnect', handleDisconnect);\n    SimpleWebSocketService.on('message', handleMessage);\n    SimpleWebSocketService.on('error', handleError);\n\n    return () => {\n      console.log('🧹 Cleaning up WebSocket connection');\n      SimpleWebSocketService.disconnect();\n    };\n  }, []);\n\n  const handleSend = async (task, data) => {\n    try {\n      console.log('Sending task:', task, 'with data:', data, 'readyState:', readyState);\n      \n      // 根据任务类型发送到对应的API端点\n      let endpoint = '';\n      let payload = data;\n      \n      switch (task) {\n        case 'autonomous_driving_task':\n          endpoint = '/events/autonomous_driving';\n          payload = {\n            start_location: data.start_location || 'A',\n            end_location: data.end_location || 'B',\n            passengers: data.passengers || 2\n          };\n          break;\n        case 'weather_alert_task':\n          endpoint = '/events/weather_alert';\n          payload = {\n            area: data.location || 'City Center',\n            alert_type: data.alert_type || 'heavy_rain',\n            severity: data.severity || 8\n          };\n          break;\n        case 'parking_update_task':\n          endpoint = '/events/parking_update';\n          payload = {\n            location: data.location || 'City Center Parking',\n            available_spots: data.available_spots || 150\n          };\n          break;\n        case 'safety_inspection_task':\n          endpoint = '/events/safety_inspection';\n          payload = {\n            location: data.location || 'Bridge B',\n            safety_status: data.require_human_intervention ? 'warning' : 'ok',\n            require_human_intervention: data.require_human_intervention || true\n          };\n          break;\n        default:\n          console.error('Unknown task type:', task);\n          return;\n      }\n      \n      const response = await fetch(`http://localhost:8008${endpoint}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload)\n      });\n      \n      if (response.ok) {\n        console.log('Task sent successfully');\n      } else {\n        console.error('Failed to send task:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error sending task:', error);\n    }\n  };\n\n  const sendGenerateReport = async () => {\n    try {\n      console.log('Generating report...');\n      \n      // 获取最近的交互记录\n      const recentEvents = messages.slice(-5).map(msg => ({\n        type: msg.type,\n        payload: msg.payload,\n        title: msg.title,\n        timestamp: msg.timestamp\n      }));\n      \n      const response = await fetch('http://localhost:8008/generate-report', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          events: recentEvents\n        })\n      });\n      \n      if (response.ok) {\n        console.log('Report generation started');\n      } else {\n        console.error('Failed to generate report:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error generating report:', error);\n    }\n  };\n\n  const clearHistory = () => {\n    setMessages([]);\n  };\n\n  // 手动重连功能\n  const handleRetryConnection = () => {\n    setIsRetrying(true);\n    setConnectionError(null);\n    console.log('🔄 手动重连WebSocket');\n    SimpleWebSocketService.reconnect();\n    \n    // 5秒后如果还在重试状态，显示错误\n    setTimeout(() => {\n      if (isRetrying) {\n        setIsRetrying(false);\n        setConnectionError('重连超时，请检查服务器状态');\n      }\n    }, 5000);\n  };\n\n  // 报告侧边栏控制函数\n  const openReportSidebar = () => {\n    setIsReportSidebarOpen(true);\n  };\n\n  const closeReportSidebar = () => {\n    setIsReportSidebarOpen(false);\n  };\n\n  // 切换报告显示模式\n  const toggleReportsOnly = () => {\n    setShowReportsOnly(!showReportsOnly);\n  };\n\n  return (\n    <div className=\"homepage\">\n      <PageHeader />\n      \n      <div className=\"container\">\n        <AgentArchitecture />\n        \n        <div className=\"event-cards-section\">\n          <div className=\"grid grid-2\">\n            <AutonomousDrivingCard \n              onSend={(data) => handleSend('autonomous_driving_task', data)} \n              readyState={readyState} \n            />\n            <WeatherAlertCard \n              onSend={(data) => handleSend('weather_alert_task', data)} \n              readyState={readyState} \n            />\n            <ParkingUpdateCard \n              onSend={(data) => handleSend('parking_update_task', data)} \n              readyState={readyState} \n            />\n            <SafetyInspectionCard \n              onSend={(data) => handleSend('safety_inspection_task', data)} \n              readyState={readyState} \n            />\n          </div>\n        </div>\n        \n        <InteractionHistory \n          events={messages} \n          readyState={readyState} \n          connectionStats={connectionStats}\n          connectionError={connectionError}\n          isRetrying={isRetrying}\n          onGenerateReport={sendGenerateReport} \n          onClear={clearHistory}\n          onOpenReportSidebar={openReportSidebar}\n          onRetryConnection={handleRetryConnection}\n          showReportsOnly={showReportsOnly}\n          onToggleReportsOnly={toggleReportsOnly}\n        />\n      </div>\n      \n      {/* 报告侧边栏 */}\n      <ReportSidebar \n        events={messages}\n        isOpen={isReportSidebarOpen}\n        onClose={closeReportSidebar}\n        onGenerateReport={sendGenerateReport}\n      />\n    </div>\n  );\n};\n\nexport default HomePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}