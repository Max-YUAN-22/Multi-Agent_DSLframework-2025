{"ast":null,"code":"// frontend/src/components/SimpleWebSocketService.js\nimport { io } from 'socket.io-client';\nclass SimpleWebSocketService {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n    this.onConnectCallback = null;\n    this.onDisconnectCallback = null;\n    this.onMessageCallback = null;\n    this.onErrorCallback = null;\n    this.userId = this.generateUserId();\n    this.lastError = null;\n    this.connectionStats = {\n      totalConnections: 0,\n      successfulConnections: 0,\n      failedConnections: 0,\n      lastConnectionTime: null,\n      lastError: null\n    };\n  }\n  generateUserId() {\n    if (typeof window === 'undefined') {\n      return `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    let userId = localStorage.getItem('websocket_user_id');\n    if (!userId) {\n      userId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      localStorage.setItem('websocket_user_id', userId);\n    }\n    return userId;\n  }\n  connect(url) {\n    console.log('🔌 连接到:', url);\n\n    // 先断开现有连接\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    try {\n      // 确保URL格式正确\n      const baseUrl = url.replace(/\\/$/, ''); // 移除末尾斜杠\n      const connectionUrl = `${baseUrl}?user_id=${this.userId}`;\n\n      // 使用Socket.IO连接，增加更多配置选项\n      this.socket = io(connectionUrl, {\n        transports: ['websocket', 'polling'],\n        timeout: 30000,\n        forceNew: true,\n        reconnection: true,\n        reconnectionAttempts: 10,\n        reconnectionDelay: 2000,\n        reconnectionDelayMax: 10000,\n        maxReconnectionAttempts: 10,\n        autoConnect: true,\n        upgrade: true,\n        rememberUpgrade: true\n      });\n      this.socket.on('connect', () => {\n        console.log('✅ WebSocket连接成功');\n        this.isConnected = true;\n        this.lastError = null;\n        this.connectionStats.successfulConnections++;\n        this.connectionStats.lastConnectionTime = new Date().toISOString();\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n      this.socket.on('disconnect', reason => {\n        console.log('❌ WebSocket断开连接:', reason);\n        this.isConnected = false;\n        if (this.onDisconnectCallback) {\n          this.onDisconnectCallback(reason);\n        }\n      });\n      this.socket.on('connect_error', error => {\n        console.error('❌ WebSocket连接错误:', error);\n        this.isConnected = false;\n        this.lastError = error;\n        this.connectionStats.failedConnections++;\n        this.connectionStats.lastError = error.message || error.toString();\n        if (this.onErrorCallback) {\n          this.onErrorCallback(error);\n        }\n      });\n      this.socket.on('reconnect', attemptNumber => {\n        console.log('🔄 WebSocket重连成功，尝试次数:', attemptNumber);\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n      this.socket.on('reconnect_error', error => {\n        console.error('❌ WebSocket重连失败:', error);\n        this.isConnected = false;\n      });\n\n      // 监听连接成功事件\n      this.socket.on('connection_successful', data => {\n        console.log('🎉 收到连接成功确认:', data);\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n\n      // 监听服务器统计\n      this.socket.on('server_stats', stats => {\n        console.log('📊 服务器统计:', stats);\n      });\n\n      // 监听所有消息\n      this.socket.onAny((eventName, ...args) => {\n        console.log('📨 收到消息:', eventName, args);\n        if (this.onMessageCallback) {\n          const message = args[0] || {};\n          this.onMessageCallback(message);\n        }\n      });\n\n      // 特别监听广播消息\n      this.socket.on('broadcast', data => {\n        console.log('📡 收到广播消息:', data);\n        if (this.onMessageCallback) {\n          this.onMessageCallback(data);\n        }\n      });\n    } catch (error) {\n      console.error('❌ WebSocket初始化失败:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    }\n  }\n  send(event, data) {\n    if (!this.isConnected || !this.socket) {\n      console.error('❌ WebSocket未连接');\n      return;\n    }\n    console.log('📤 发送消息:', {\n      event,\n      data\n    });\n    try {\n      this.socket.emit(event, data);\n    } catch (error) {\n      console.error('❌ 发送消息失败:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    }\n  }\n  on(event, callback) {\n    switch (event) {\n      case 'connect':\n        this.onConnectCallback = callback;\n        break;\n      case 'disconnect':\n        this.onDisconnectCallback = callback;\n        break;\n      case 'message':\n        this.onMessageCallback = callback;\n        break;\n      case 'error':\n        this.onErrorCallback = callback;\n        break;\n      default:\n        console.error(`Unknown event: ${event}`);\n    }\n  }\n  disconnect() {\n    this.isConnected = false;\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    if (this.onDisconnectCallback) {\n      this.onDisconnectCallback();\n    }\n  }\n  reconnect() {\n    console.log('🔄 手动重连WebSocket...');\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n    // 重新连接\n    setTimeout(() => {\n      this.connect('http://localhost:8008');\n    }, 1000);\n  }\n  getConnectionStats() {\n    var _this$socket;\n    return {\n      ...this.connectionStats,\n      connected: this.isConnected,\n      userId: this.userId,\n      socketId: ((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.id) || null,\n      lastError: this.lastError\n    };\n  }\n  getConnectionStatus() {\n    if (!this.socket) {\n      return {\n        status: 'disconnected',\n        message: '未初始化连接'\n      };\n    }\n    if (this.isConnected) {\n      return {\n        status: 'connected',\n        message: '连接正常'\n      };\n    }\n    if (this.lastError) {\n      return {\n        status: 'error',\n        message: `连接错误: ${this.lastError.message || this.lastError}`\n      };\n    }\n    return {\n      status: 'connecting',\n      message: '正在连接...'\n    };\n  }\n\n  // 添加手动重连方法\n  reconnect() {\n    if (this.socket) {\n      console.log('🔄 手动重连WebSocket');\n      this.socket.disconnect();\n      this.socket.connect();\n    }\n  }\n}\nconst instance = new SimpleWebSocketService();\nexport default instance;","map":{"version":3,"names":["io","SimpleWebSocketService","constructor","socket","isConnected","onConnectCallback","onDisconnectCallback","onMessageCallback","onErrorCallback","userId","generateUserId","lastError","connectionStats","totalConnections","successfulConnections","failedConnections","lastConnectionTime","window","Date","now","Math","random","toString","substr","localStorage","getItem","setItem","connect","url","console","log","disconnect","baseUrl","replace","connectionUrl","transports","timeout","forceNew","reconnection","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","maxReconnectionAttempts","autoConnect","upgrade","rememberUpgrade","on","toISOString","reason","error","message","attemptNumber","data","stats","onAny","eventName","args","send","event","emit","callback","reconnect","setTimeout","getConnectionStats","_this$socket","connected","socketId","id","getConnectionStatus","status","instance"],"sources":["/Users/Apple/Desktop/multi-agent-dsl-final/frontend/src/components/SimpleWebSocketService.js"],"sourcesContent":["// frontend/src/components/SimpleWebSocketService.js\nimport { io } from 'socket.io-client';\n\nclass SimpleWebSocketService {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n    this.onConnectCallback = null;\n    this.onDisconnectCallback = null;\n    this.onMessageCallback = null;\n    this.onErrorCallback = null;\n    this.userId = this.generateUserId();\n    this.lastError = null;\n    this.connectionStats = {\n      totalConnections: 0,\n      successfulConnections: 0,\n      failedConnections: 0,\n      lastConnectionTime: null,\n      lastError: null\n    };\n  }\n\n  generateUserId() {\n    if (typeof window === 'undefined') {\n      return `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    let userId = localStorage.getItem('websocket_user_id');\n    if (!userId) {\n      userId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      localStorage.setItem('websocket_user_id', userId);\n    }\n    return userId;\n  }\n\n  connect(url) {\n    console.log('🔌 连接到:', url);\n    \n    // 先断开现有连接\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    \n    try {\n      // 确保URL格式正确\n      const baseUrl = url.replace(/\\/$/, ''); // 移除末尾斜杠\n      const connectionUrl = `${baseUrl}?user_id=${this.userId}`;\n      \n      // 使用Socket.IO连接，增加更多配置选项\n      this.socket = io(connectionUrl, {\n        transports: ['websocket', 'polling'],\n        timeout: 30000,\n        forceNew: true,\n        reconnection: true,\n        reconnectionAttempts: 10,\n        reconnectionDelay: 2000,\n        reconnectionDelayMax: 10000,\n        maxReconnectionAttempts: 10,\n        autoConnect: true,\n        upgrade: true,\n        rememberUpgrade: true\n      });\n\n      this.socket.on('connect', () => {\n        console.log('✅ WebSocket连接成功');\n        this.isConnected = true;\n        this.lastError = null;\n        this.connectionStats.successfulConnections++;\n        this.connectionStats.lastConnectionTime = new Date().toISOString();\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n\n      this.socket.on('disconnect', (reason) => {\n        console.log('❌ WebSocket断开连接:', reason);\n        this.isConnected = false;\n        if (this.onDisconnectCallback) {\n          this.onDisconnectCallback(reason);\n        }\n      });\n\n      this.socket.on('connect_error', (error) => {\n        console.error('❌ WebSocket连接错误:', error);\n        this.isConnected = false;\n        this.lastError = error;\n        this.connectionStats.failedConnections++;\n        this.connectionStats.lastError = error.message || error.toString();\n        if (this.onErrorCallback) {\n          this.onErrorCallback(error);\n        }\n      });\n\n      this.socket.on('reconnect', (attemptNumber) => {\n        console.log('🔄 WebSocket重连成功，尝试次数:', attemptNumber);\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n\n      this.socket.on('reconnect_error', (error) => {\n        console.error('❌ WebSocket重连失败:', error);\n        this.isConnected = false;\n      });\n\n      // 监听连接成功事件\n      this.socket.on('connection_successful', (data) => {\n        console.log('🎉 收到连接成功确认:', data);\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n\n      // 监听服务器统计\n      this.socket.on('server_stats', (stats) => {\n        console.log('📊 服务器统计:', stats);\n      });\n\n      // 监听所有消息\n      this.socket.onAny((eventName, ...args) => {\n        console.log('📨 收到消息:', eventName, args);\n        if (this.onMessageCallback) {\n          const message = args[0] || {};\n          this.onMessageCallback(message);\n        }\n      });\n\n      // 特别监听广播消息\n      this.socket.on('broadcast', (data) => {\n        console.log('📡 收到广播消息:', data);\n        if (this.onMessageCallback) {\n          this.onMessageCallback(data);\n        }\n      });\n\n    } catch (error) {\n      console.error('❌ WebSocket初始化失败:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    }\n  }\n\n  send(event, data) {\n    if (!this.isConnected || !this.socket) {\n      console.error('❌ WebSocket未连接');\n      return;\n    }\n\n    console.log('📤 发送消息:', { event, data });\n    \n    try {\n      this.socket.emit(event, data);\n    } catch (error) {\n      console.error('❌ 发送消息失败:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    }\n  }\n\n  on(event, callback) {\n    switch (event) {\n      case 'connect':\n        this.onConnectCallback = callback;\n        break;\n      case 'disconnect':\n        this.onDisconnectCallback = callback;\n        break;\n      case 'message':\n        this.onMessageCallback = callback;\n        break;\n      case 'error':\n        this.onErrorCallback = callback;\n        break;\n      default:\n        console.error(`Unknown event: ${event}`);\n    }\n  }\n\n  disconnect() {\n    this.isConnected = false;\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    if (this.onDisconnectCallback) {\n      this.onDisconnectCallback();\n    }\n  }\n\n  reconnect() {\n    console.log('🔄 手动重连WebSocket...');\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n    // 重新连接\n    setTimeout(() => {\n      this.connect('http://localhost:8008');\n    }, 1000);\n  }\n\n  getConnectionStats() {\n    return {\n      ...this.connectionStats,\n      connected: this.isConnected,\n      userId: this.userId,\n      socketId: this.socket?.id || null,\n      lastError: this.lastError\n    };\n  }\n\n  getConnectionStatus() {\n    if (!this.socket) {\n      return { status: 'disconnected', message: '未初始化连接' };\n    }\n    \n    if (this.isConnected) {\n      return { status: 'connected', message: '连接正常' };\n    }\n    \n    if (this.lastError) {\n      return { \n        status: 'error', \n        message: `连接错误: ${this.lastError.message || this.lastError}` \n      };\n    }\n    \n    return { status: 'connecting', message: '正在连接...' };\n  }\n\n  // 添加手动重连方法\n  reconnect() {\n    if (this.socket) {\n      console.log('🔄 手动重连WebSocket');\n      this.socket.disconnect();\n      this.socket.connect();\n    }\n  }\n}\n\nconst instance = new SimpleWebSocketService();\nexport default instance;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}