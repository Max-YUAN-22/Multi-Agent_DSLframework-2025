{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from 'react';\nconst useWebSocket = url => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [readyState, setReadyState] = useState('closed');\n  const ws = useRef(null);\n  useEffect(() => {\n    const connect = () => {\n      ws.current = new WebSocket(url);\n      ws.current.onopen = () => {\n        console.log('WebSocket Connected');\n        setReadyState('open');\n      };\n      ws.current.onmessage = event => {\n        const message = JSON.parse(event.data);\n        setMessages(prevMessages => [...prevMessages, message]);\n      };\n      ws.current.onclose = () => {\n        console.log('WebSocket Disconnected');\n        setReadyState('closed');\n        // Attempt to reconnect after a delay\n        setTimeout(connect, 5000);\n      };\n      ws.current.onerror = error => {\n        console.error('WebSocket Error:', error);\n        setReadyState('closed');\n      };\n    };\n    connect();\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, [url]);\n  const sendMessage = useCallback((type, data) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      const message = JSON.stringify({\n        type,\n        data\n      });\n      ws.current.send(message);\n    } else {\n      console.error('WebSocket is not connected.');\n    }\n  }, []);\n  const sendGenerateReport = useCallback(() => {\n    sendMessage('generate_report');\n  }, [sendMessage]);\n  const clearHistory = useCallback(() => {\n    setMessages([]);\n  }, []);\n  return {\n    messages,\n    readyState,\n    sendMessage,\n    sendGenerateReport,\n    clearHistory\n  };\n};\n_s(useWebSocket, \"DBd6bBFmp5bR+GBFhwz/loznlRE=\");\nexport default useWebSocket;","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","useWebSocket","url","_s","messages","setMessages","readyState","setReadyState","ws","connect","current","WebSocket","onopen","console","log","onmessage","event","message","JSON","parse","data","prevMessages","onclose","setTimeout","onerror","error","close","sendMessage","type","OPEN","stringify","send","sendGenerateReport","clearHistory"],"sources":["/Users/Apple/Desktop/multi-agent-dsl-final/frontend/src/hooks/useWebSocket.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from 'react';\n\nconst useWebSocket = (url) => {\n  const [messages, setMessages] = useState([]);\n  const [readyState, setReadyState] = useState('closed');\n  const ws = useRef(null);\n\n  useEffect(() => {\n    const connect = () => {\n      ws.current = new WebSocket(url);\n\n      ws.current.onopen = () => {\n        console.log('WebSocket Connected');\n        setReadyState('open');\n      };\n\n      ws.current.onmessage = (event) => {\n        const message = JSON.parse(event.data);\n        setMessages((prevMessages) => [...prevMessages, message]);\n      };\n\n      ws.current.onclose = () => {\n        console.log('WebSocket Disconnected');\n        setReadyState('closed');\n        // Attempt to reconnect after a delay\n        setTimeout(connect, 5000);\n      };\n\n      ws.current.onerror = (error) => {\n        console.error('WebSocket Error:', error);\n        setReadyState('closed');\n      };\n    };\n\n    connect();\n\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, [url]);\n\n  const sendMessage = useCallback((type, data) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      const message = JSON.stringify({ type, data });\n      ws.current.send(message);\n    } else {\n      console.error('WebSocket is not connected.');\n    }\n  }, []);\n\n  const sendGenerateReport = useCallback(() => {\n    sendMessage('generate_report');\n  }, [sendMessage]);\n\n  const clearHistory = useCallback(() => {\n    setMessages([]);\n  }, []);\n\n  return { messages, readyState, sendMessage, sendGenerateReport, clearHistory };\n};\n\nexport default useWebSocket;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AAEhE,MAAMC,YAAY,GAAIC,GAAG,IAAK;EAAAC,EAAA;EAC5B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,QAAQ,CAAC;EACtD,MAAMW,EAAE,GAAGT,MAAM,CAAC,IAAI,CAAC;EAEvBD,SAAS,CAAC,MAAM;IACd,MAAMW,OAAO,GAAGA,CAAA,KAAM;MACpBD,EAAE,CAACE,OAAO,GAAG,IAAIC,SAAS,CAACT,GAAG,CAAC;MAE/BM,EAAE,CAACE,OAAO,CAACE,MAAM,GAAG,MAAM;QACxBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;QAClCP,aAAa,CAAC,MAAM,CAAC;MACvB,CAAC;MAEDC,EAAE,CAACE,OAAO,CAACK,SAAS,GAAIC,KAAK,IAAK;QAChC,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;QACtCf,WAAW,CAAEgB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEJ,OAAO,CAAC,CAAC;MAC3D,CAAC;MAEDT,EAAE,CAACE,OAAO,CAACY,OAAO,GAAG,MAAM;QACzBT,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;QACrCP,aAAa,CAAC,QAAQ,CAAC;QACvB;QACAgB,UAAU,CAACd,OAAO,EAAE,IAAI,CAAC;MAC3B,CAAC;MAEDD,EAAE,CAACE,OAAO,CAACc,OAAO,GAAIC,KAAK,IAAK;QAC9BZ,OAAO,CAACY,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;QACxClB,aAAa,CAAC,QAAQ,CAAC;MACzB,CAAC;IACH,CAAC;IAEDE,OAAO,CAAC,CAAC;IAET,OAAO,MAAM;MACX,IAAID,EAAE,CAACE,OAAO,EAAE;QACdF,EAAE,CAACE,OAAO,CAACgB,KAAK,CAAC,CAAC;MACpB;IACF,CAAC;EACH,CAAC,EAAE,CAACxB,GAAG,CAAC,CAAC;EAET,MAAMyB,WAAW,GAAG3B,WAAW,CAAC,CAAC4B,IAAI,EAAER,IAAI,KAAK;IAC9C,IAAIZ,EAAE,CAACE,OAAO,IAAIF,EAAE,CAACE,OAAO,CAACJ,UAAU,KAAKK,SAAS,CAACkB,IAAI,EAAE;MAC1D,MAAMZ,OAAO,GAAGC,IAAI,CAACY,SAAS,CAAC;QAAEF,IAAI;QAAER;MAAK,CAAC,CAAC;MAC9CZ,EAAE,CAACE,OAAO,CAACqB,IAAI,CAACd,OAAO,CAAC;IAC1B,CAAC,MAAM;MACLJ,OAAO,CAACY,KAAK,CAAC,6BAA6B,CAAC;IAC9C;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,kBAAkB,GAAGhC,WAAW,CAAC,MAAM;IAC3C2B,WAAW,CAAC,iBAAiB,CAAC;EAChC,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,MAAMM,YAAY,GAAGjC,WAAW,CAAC,MAAM;IACrCK,WAAW,CAAC,EAAE,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAED,QAAQ;IAAEE,UAAU;IAAEqB,WAAW;IAAEK,kBAAkB;IAAEC;EAAa,CAAC;AAChF,CAAC;AAAC9B,EAAA,CA3DIF,YAAY;AA6DlB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}