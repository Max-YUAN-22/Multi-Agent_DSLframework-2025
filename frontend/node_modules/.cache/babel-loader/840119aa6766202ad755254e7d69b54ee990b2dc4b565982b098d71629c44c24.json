{"ast":null,"code":"// frontend/src/components/WebSocketService.js\nimport{io}from'socket.io-client';import WebSocketConnectionPool from'./WebSocketConnectionPool';class WebSocketService{constructor(){this.connectionPool=WebSocketConnectionPool;this.currentConnection=null;this.onConnectCallback=null;this.onDisconnectCallback=null;this.onMessageCallback=null;this.onErrorCallback=null;this.isConnected=false;this.setupConnectionPoolHandlers();}setupConnectionPoolHandlers(){this.connectionPool.setEventHandlers({onConnectionSuccess:(connectionId,socket)=>{this.currentConnection=socket;this.isConnected=true;if(this.onConnectCallback){this.onConnectCallback();}},onConnectionLost:(connectionId,socket,reason)=>{this.isConnected=false;if(this.onDisconnectCallback){this.onDisconnectCallback(reason);}},onConnectionError:(connectionId,socket,error)=>{this.isConnected=false;if(this.onErrorCallback){this.onErrorCallback(error);}},onReconnectionSuccess:(connectionId,socket,attemptNumber)=>{this.currentConnection=socket;this.isConnected=true;if(this.onConnectCallback){this.onConnectCallback();}},onReconnectionError:(connectionId,socket,error)=>{this.isConnected=false;if(this.onErrorCallback){this.onErrorCallback(error);}},onConnectionConfirmed:(connectionId,socket,data)=>{this.currentConnection=socket;this.isConnected=true;if(this.onConnectCallback){this.onConnectCallback();}},onMessage:(connectionId,socket,eventName,args)=>{if(this.onMessageCallback){const message=args[0]||{};this.onMessageCallback(message);}}});}connect(url){console.log('🔌 使用连接池连接到:',url);// 检查是否已有活跃连接\nconst activeConnection=this.connectionPool.getActiveConnection();if(activeConnection&&activeConnection.connected){console.log('✅ 使用现有活跃连接');this.currentConnection=activeConnection;this.isConnected=true;if(this.onConnectCallback){this.onConnectCallback();}return;}// 创建新连接\nconst{connectionId,socket}=this.connectionPool.createConnection(url);this.currentConnection=socket;console.log(\"\\uD83D\\uDD0C \\u521B\\u5EFA\\u65B0\\u8FDE\\u63A5: \".concat(connectionId));}send(event,data){if(!this.isConnected||!this.currentConnection){console.error('❌ WebSocket未连接');return;}console.log('📤 发送消息:',{event,data});try{this.currentConnection.emit(event,data);}catch(error){console.error('❌ 发送消息失败:',error);if(this.onErrorCallback){this.onErrorCallback(error);}}}on(event,callback){switch(event){case'connect':this.onConnectCallback=callback;break;case'disconnect':this.onDisconnectCallback=callback;break;case'message':this.onMessageCallback=callback;break;case'error':this.onErrorCallback=callback;break;default:console.error(\"Unknown event: \".concat(event));}}disconnect(){this.isConnected=false;this.currentConnection=null;// 注意：这里不关闭连接池中的所有连接，只重置当前连接引用\nif(this.onDisconnectCallback){this.onDisconnectCallback();}}reconnect(){console.log('🔄 手动重连WebSocket...');this.connectionPool.reconnectAll();}getConnectionStats(){return this.connectionPool.getConnectionStats();}closeAllConnections(){console.log('🔌 关闭所有连接');this.connectionPool.closeAllConnections();this.isConnected=false;this.currentConnection=null;}}const instance=new WebSocketService();export default instance;","map":{"version":3,"names":["io","WebSocketConnectionPool","WebSocketService","constructor","connectionPool","currentConnection","onConnectCallback","onDisconnectCallback","onMessageCallback","onErrorCallback","isConnected","setupConnectionPoolHandlers","setEventHandlers","onConnectionSuccess","connectionId","socket","onConnectionLost","reason","onConnectionError","error","onReconnectionSuccess","attemptNumber","onReconnectionError","onConnectionConfirmed","data","onMessage","eventName","args","message","connect","url","console","log","activeConnection","getActiveConnection","connected","createConnection","concat","send","event","emit","on","callback","disconnect","reconnect","reconnectAll","getConnectionStats","closeAllConnections","instance"],"sources":["/Users/Apple/Desktop/multi-agent-dsl-final/frontend/src/components/WebSocketService.js"],"sourcesContent":["// frontend/src/components/WebSocketService.js\nimport { io } from 'socket.io-client';\nimport WebSocketConnectionPool from './WebSocketConnectionPool';\n\nclass WebSocketService {\n  constructor() {\n    this.connectionPool = WebSocketConnectionPool;\n    this.currentConnection = null;\n    this.onConnectCallback = null;\n    this.onDisconnectCallback = null;\n    this.onMessageCallback = null;\n    this.onErrorCallback = null;\n    this.isConnected = false;\n    this.setupConnectionPoolHandlers();\n  }\n\n  setupConnectionPoolHandlers() {\n    this.connectionPool.setEventHandlers({\n      onConnectionSuccess: (connectionId, socket) => {\n        this.currentConnection = socket;\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      },\n      onConnectionLost: (connectionId, socket, reason) => {\n        this.isConnected = false;\n        if (this.onDisconnectCallback) {\n          this.onDisconnectCallback(reason);\n        }\n      },\n      onConnectionError: (connectionId, socket, error) => {\n        this.isConnected = false;\n        if (this.onErrorCallback) {\n          this.onErrorCallback(error);\n        }\n      },\n      onReconnectionSuccess: (connectionId, socket, attemptNumber) => {\n        this.currentConnection = socket;\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      },\n      onReconnectionError: (connectionId, socket, error) => {\n        this.isConnected = false;\n        if (this.onErrorCallback) {\n          this.onErrorCallback(error);\n        }\n      },\n      onConnectionConfirmed: (connectionId, socket, data) => {\n        this.currentConnection = socket;\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      },\n      onMessage: (connectionId, socket, eventName, args) => {\n        if (this.onMessageCallback) {\n          const message = args[0] || {};\n          this.onMessageCallback(message);\n        }\n      }\n    });\n  }\n\n  connect(url) {\n    console.log('🔌 使用连接池连接到:', url);\n    \n    // 检查是否已有活跃连接\n    const activeConnection = this.connectionPool.getActiveConnection();\n    if (activeConnection && activeConnection.connected) {\n      console.log('✅ 使用现有活跃连接');\n      this.currentConnection = activeConnection;\n      this.isConnected = true;\n      if (this.onConnectCallback) {\n        this.onConnectCallback();\n      }\n      return;\n    }\n    \n    // 创建新连接\n    const { connectionId, socket } = this.connectionPool.createConnection(url);\n    this.currentConnection = socket;\n    \n    console.log(`🔌 创建新连接: ${connectionId}`);\n  }\n\n  send(event, data) {\n    if (!this.isConnected || !this.currentConnection) {\n      console.error('❌ WebSocket未连接');\n      return;\n    }\n\n    console.log('📤 发送消息:', { event, data });\n    \n    try {\n      this.currentConnection.emit(event, data);\n    } catch (error) {\n      console.error('❌ 发送消息失败:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    }\n  }\n\n  on(event, callback) {\n    switch (event) {\n      case 'connect':\n        this.onConnectCallback = callback;\n        break;\n      case 'disconnect':\n        this.onDisconnectCallback = callback;\n        break;\n      case 'message':\n        this.onMessageCallback = callback;\n        break;\n      case 'error':\n        this.onErrorCallback = callback;\n        break;\n      default:\n        console.error(`Unknown event: ${event}`);\n    }\n  }\n\n  disconnect() {\n    this.isConnected = false;\n    this.currentConnection = null;\n    // 注意：这里不关闭连接池中的所有连接，只重置当前连接引用\n    if (this.onDisconnectCallback) {\n      this.onDisconnectCallback();\n    }\n  }\n\n  reconnect() {\n    console.log('🔄 手动重连WebSocket...');\n    this.connectionPool.reconnectAll();\n  }\n\n  getConnectionStats() {\n    return this.connectionPool.getConnectionStats();\n  }\n\n  closeAllConnections() {\n    console.log('🔌 关闭所有连接');\n    this.connectionPool.closeAllConnections();\n    this.isConnected = false;\n    this.currentConnection = null;\n  }\n}\n\nconst instance = new WebSocketService();\nexport default instance;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}