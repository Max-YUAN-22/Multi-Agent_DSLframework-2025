{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nconst useWebSocket = (url, onMessage) => {\n  _s();\n  const socket = useRef(null);\n  const interval = useRef(null);\n  useEffect(() => {\n    console.log('Attempting to connect to WebSocket at:', url);\n    socket.current = new WebSocket(url);\n    const sendPing = () => {\n      if (socket.current && socket.current.readyState === WebSocket.OPEN) {\n        socket.current.send(JSON.stringify({\n          type: 'ping'\n        }));\n      }\n    };\n    socket.current.onopen = () => {\n      console.log('WebSocket connected successfully');\n      // Send a ping every 30 seconds to keep the connection alive\n      interval.current = setInterval(sendPing, 30000);\n    };\n    socket.current.onmessage = event => {\n      try {\n        const message = JSON.parse(event.data);\n        console.log('WebSocket message received:', message);\n        if (message.type === 'ping') {\n          if (socket.current && socket.current.readyState === WebSocket.OPEN) {\n            socket.current.send(JSON.stringify({\n              type: 'pong'\n            }));\n          }\n        } else {\n          onMessage(message);\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n    socket.current.onclose = event => {\n      console.log('WebSocket disconnected:', event.code, event.reason);\n      clearInterval(interval.current);\n    };\n    socket.current.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n    return () => {\n      if (socket.current) {\n        console.log('Closing WebSocket connection.');\n        socket.current.close();\n      }\n      clearInterval(interval.current);\n    };\n  }, [url, onMessage]);\n  return socket.current;\n};\n_s(useWebSocket, \"8vShNuWTVPRAc+DpJtHdeYHBORA=\");\nexport default useWebSocket;","map":{"version":3,"names":["useEffect","useRef","useWebSocket","url","onMessage","_s","socket","interval","console","log","current","WebSocket","sendPing","readyState","OPEN","send","JSON","stringify","type","onopen","setInterval","onmessage","event","message","parse","data","error","onclose","code","reason","clearInterval","onerror","close"],"sources":["/Users/Apple/Desktop/multi-agent-dsl-final/frontend/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nconst useWebSocket = (url, onMessage) => {\n  const socket = useRef(null);\n  const interval = useRef(null);\n\n  useEffect(() => {\n    console.log('Attempting to connect to WebSocket at:', url);\n    socket.current = new WebSocket(url);\n\n    const sendPing = () => {\n      if (socket.current && socket.current.readyState === WebSocket.OPEN) {\n        socket.current.send(JSON.stringify({ type: 'ping' }));\n      }\n    };\n\n    socket.current.onopen = () => {\n      console.log('WebSocket connected successfully');\n      // Send a ping every 30 seconds to keep the connection alive\n      interval.current = setInterval(sendPing, 30000);\n    };\n\n    socket.current.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        console.log('WebSocket message received:', message);\n\n        if (message.type === 'ping') {\n          if (socket.current && socket.current.readyState === WebSocket.OPEN) {\n            socket.current.send(JSON.stringify({ type: 'pong' }));\n          }\n        } else {\n          onMessage(message);\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n\n    socket.current.onclose = (event) => {\n      console.log('WebSocket disconnected:', event.code, event.reason);\n      clearInterval(interval.current);\n    };\n\n    socket.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n\n    return () => {\n      if (socket.current) {\n        console.log('Closing WebSocket connection.');\n        socket.current.close();\n      }\n      clearInterval(interval.current);\n    };\n  }, [url, onMessage]);\n\n  return socket.current;\n};\n\nexport default useWebSocket;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEzC,MAAMC,YAAY,GAAGA,CAACC,GAAG,EAAEC,SAAS,KAAK;EAAAC,EAAA;EACvC,MAAMC,MAAM,GAAGL,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMM,QAAQ,GAAGN,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACdQ,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEN,GAAG,CAAC;IAC1DG,MAAM,CAACI,OAAO,GAAG,IAAIC,SAAS,CAACR,GAAG,CAAC;IAEnC,MAAMS,QAAQ,GAAGA,CAAA,KAAM;MACrB,IAAIN,MAAM,CAACI,OAAO,IAAIJ,MAAM,CAACI,OAAO,CAACG,UAAU,KAAKF,SAAS,CAACG,IAAI,EAAE;QAClER,MAAM,CAACI,OAAO,CAACK,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;UAAEC,IAAI,EAAE;QAAO,CAAC,CAAC,CAAC;MACvD;IACF,CAAC;IAEDZ,MAAM,CAACI,OAAO,CAACS,MAAM,GAAG,MAAM;MAC5BX,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MAC/C;MACAF,QAAQ,CAACG,OAAO,GAAGU,WAAW,CAACR,QAAQ,EAAE,KAAK,CAAC;IACjD,CAAC;IAEDN,MAAM,CAACI,OAAO,CAACW,SAAS,GAAIC,KAAK,IAAK;MACpC,IAAI;QACF,MAAMC,OAAO,GAAGP,IAAI,CAACQ,KAAK,CAACF,KAAK,CAACG,IAAI,CAAC;QACtCjB,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEc,OAAO,CAAC;QAEnD,IAAIA,OAAO,CAACL,IAAI,KAAK,MAAM,EAAE;UAC3B,IAAIZ,MAAM,CAACI,OAAO,IAAIJ,MAAM,CAACI,OAAO,CAACG,UAAU,KAAKF,SAAS,CAACG,IAAI,EAAE;YAClER,MAAM,CAACI,OAAO,CAACK,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;cAAEC,IAAI,EAAE;YAAO,CAAC,CAAC,CAAC;UACvD;QACF,CAAC,MAAM;UACLd,SAAS,CAACmB,OAAO,CAAC;QACpB;MACF,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdlB,OAAO,CAACkB,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC;IAEDpB,MAAM,CAACI,OAAO,CAACiB,OAAO,GAAIL,KAAK,IAAK;MAClCd,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEa,KAAK,CAACM,IAAI,EAAEN,KAAK,CAACO,MAAM,CAAC;MAChEC,aAAa,CAACvB,QAAQ,CAACG,OAAO,CAAC;IACjC,CAAC;IAEDJ,MAAM,CAACI,OAAO,CAACqB,OAAO,GAAIL,KAAK,IAAK;MAClClB,OAAO,CAACkB,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC1C,CAAC;IAED,OAAO,MAAM;MACX,IAAIpB,MAAM,CAACI,OAAO,EAAE;QAClBF,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;QAC5CH,MAAM,CAACI,OAAO,CAACsB,KAAK,CAAC,CAAC;MACxB;MACAF,aAAa,CAACvB,QAAQ,CAACG,OAAO,CAAC;IACjC,CAAC;EACH,CAAC,EAAE,CAACP,GAAG,EAAEC,SAAS,CAAC,CAAC;EAEpB,OAAOE,MAAM,CAACI,OAAO;AACvB,CAAC;AAACL,EAAA,CAxDIH,YAAY;AA0DlB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}