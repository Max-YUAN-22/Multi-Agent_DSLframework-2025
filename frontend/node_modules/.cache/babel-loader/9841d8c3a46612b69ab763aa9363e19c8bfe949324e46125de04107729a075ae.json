{"ast":null,"code":"// frontend/src/components/WebSocketService.js\nimport { io } from 'socket.io-client';\nimport WebSocketConnectionPool from './WebSocketConnectionPool';\nclass WebSocketService {\n  constructor() {\n    this.connectionPool = WebSocketConnectionPool;\n    this.currentConnection = null;\n    this.onConnectCallback = null;\n    this.onDisconnectCallback = null;\n    this.onMessageCallback = null;\n    this.onErrorCallback = null;\n    this.isConnected = false;\n    this.setupConnectionPoolHandlers();\n  }\n  setupConnectionPoolHandlers() {\n    this.connectionPool.setEventHandlers({\n      onConnectionSuccess: (connectionId, socket) => {\n        this.currentConnection = socket;\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      },\n      onConnectionLost: (connectionId, socket, reason) => {\n        this.isConnected = false;\n        if (this.onDisconnectCallback) {\n          this.onDisconnectCallback(reason);\n        }\n      },\n      onConnectionError: (connectionId, socket, error) => {\n        this.isConnected = false;\n        if (this.onErrorCallback) {\n          this.onErrorCallback(error);\n        }\n      },\n      onReconnectionSuccess: (connectionId, socket, attemptNumber) => {\n        this.currentConnection = socket;\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      },\n      onReconnectionError: (connectionId, socket, error) => {\n        this.isConnected = false;\n        if (this.onErrorCallback) {\n          this.onErrorCallback(error);\n        }\n      },\n      onConnectionConfirmed: (connectionId, socket, data) => {\n        this.currentConnection = socket;\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      },\n      onMessage: (connectionId, socket, eventName, args) => {\n        if (this.onMessageCallback) {\n          const message = args[0] || {};\n          this.onMessageCallback(message);\n        }\n      }\n    });\n  }\n  connect(url) {\n    console.log('🔌 使用连接池连接到:', url);\n\n    // 检查是否已有活跃连接\n    const activeConnection = this.connectionPool.getActiveConnection();\n    if (activeConnection && activeConnection.connected) {\n      console.log('✅ 使用现有活跃连接');\n      this.currentConnection = activeConnection;\n      this.isConnected = true;\n      if (this.onConnectCallback) {\n        this.onConnectCallback();\n      }\n      return;\n    }\n\n    // 创建新连接\n    const {\n      connectionId,\n      socket\n    } = this.connectionPool.createConnection(url);\n    this.currentConnection = socket;\n    console.log(`🔌 创建新连接: ${connectionId}`);\n  }\n  send(event, data) {\n    if (!this.isConnected || !this.currentConnection) {\n      console.error('❌ WebSocket未连接');\n      return;\n    }\n    console.log('📤 发送消息:', {\n      event,\n      data\n    });\n    try {\n      this.currentConnection.emit(event, data);\n    } catch (error) {\n      console.error('❌ 发送消息失败:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    }\n  }\n  on(event, callback) {\n    switch (event) {\n      case 'connect':\n        this.onConnectCallback = callback;\n        break;\n      case 'disconnect':\n        this.onDisconnectCallback = callback;\n        break;\n      case 'message':\n        this.onMessageCallback = callback;\n        break;\n      case 'error':\n        this.onErrorCallback = callback;\n        break;\n      default:\n        console.error(`Unknown event: ${event}`);\n    }\n  }\n  disconnect() {\n    this.isConnected = false;\n    this.currentConnection = null;\n    // 注意：这里不关闭连接池中的所有连接，只重置当前连接引用\n    if (this.onDisconnectCallback) {\n      this.onDisconnectCallback();\n    }\n  }\n  reconnect() {\n    console.log('🔄 手动重连WebSocket...');\n    this.connectionPool.reconnectAll();\n  }\n  getConnectionStats() {\n    return this.connectionPool.getConnectionStats();\n  }\n  closeAllConnections() {\n    console.log('🔌 关闭所有连接');\n    this.connectionPool.closeAllConnections();\n    this.isConnected = false;\n    this.currentConnection = null;\n  }\n}\nconst instance = new WebSocketService();\nexport default instance;","map":{"version":3,"names":["io","WebSocketConnectionPool","WebSocketService","constructor","connectionPool","currentConnection","onConnectCallback","onDisconnectCallback","onMessageCallback","onErrorCallback","isConnected","setupConnectionPoolHandlers","setEventHandlers","onConnectionSuccess","connectionId","socket","onConnectionLost","reason","onConnectionError","error","onReconnectionSuccess","attemptNumber","onReconnectionError","onConnectionConfirmed","data","onMessage","eventName","args","message","connect","url","console","log","activeConnection","getActiveConnection","connected","createConnection","send","event","emit","on","callback","disconnect","reconnect","reconnectAll","getConnectionStats","closeAllConnections","instance"],"sources":["/Users/Apple/Desktop/multi-agent-dsl-final/frontend/src/components/WebSocketService.js"],"sourcesContent":["// frontend/src/components/WebSocketService.js\nimport { io } from 'socket.io-client';\nimport WebSocketConnectionPool from './WebSocketConnectionPool';\n\nclass WebSocketService {\n  constructor() {\n    this.connectionPool = WebSocketConnectionPool;\n    this.currentConnection = null;\n    this.onConnectCallback = null;\n    this.onDisconnectCallback = null;\n    this.onMessageCallback = null;\n    this.onErrorCallback = null;\n    this.isConnected = false;\n    this.setupConnectionPoolHandlers();\n  }\n\n  setupConnectionPoolHandlers() {\n    this.connectionPool.setEventHandlers({\n      onConnectionSuccess: (connectionId, socket) => {\n        this.currentConnection = socket;\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      },\n      onConnectionLost: (connectionId, socket, reason) => {\n        this.isConnected = false;\n        if (this.onDisconnectCallback) {\n          this.onDisconnectCallback(reason);\n        }\n      },\n      onConnectionError: (connectionId, socket, error) => {\n        this.isConnected = false;\n        if (this.onErrorCallback) {\n          this.onErrorCallback(error);\n        }\n      },\n      onReconnectionSuccess: (connectionId, socket, attemptNumber) => {\n        this.currentConnection = socket;\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      },\n      onReconnectionError: (connectionId, socket, error) => {\n        this.isConnected = false;\n        if (this.onErrorCallback) {\n          this.onErrorCallback(error);\n        }\n      },\n      onConnectionConfirmed: (connectionId, socket, data) => {\n        this.currentConnection = socket;\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      },\n      onMessage: (connectionId, socket, eventName, args) => {\n        if (this.onMessageCallback) {\n          const message = args[0] || {};\n          this.onMessageCallback(message);\n        }\n      }\n    });\n  }\n\n  connect(url) {\n    console.log('🔌 使用连接池连接到:', url);\n    \n    // 检查是否已有活跃连接\n    const activeConnection = this.connectionPool.getActiveConnection();\n    if (activeConnection && activeConnection.connected) {\n      console.log('✅ 使用现有活跃连接');\n      this.currentConnection = activeConnection;\n      this.isConnected = true;\n      if (this.onConnectCallback) {\n        this.onConnectCallback();\n      }\n      return;\n    }\n    \n    // 创建新连接\n    const { connectionId, socket } = this.connectionPool.createConnection(url);\n    this.currentConnection = socket;\n    \n    console.log(`🔌 创建新连接: ${connectionId}`);\n  }\n\n  send(event, data) {\n    if (!this.isConnected || !this.currentConnection) {\n      console.error('❌ WebSocket未连接');\n      return;\n    }\n\n    console.log('📤 发送消息:', { event, data });\n    \n    try {\n      this.currentConnection.emit(event, data);\n    } catch (error) {\n      console.error('❌ 发送消息失败:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    }\n  }\n\n  on(event, callback) {\n    switch (event) {\n      case 'connect':\n        this.onConnectCallback = callback;\n        break;\n      case 'disconnect':\n        this.onDisconnectCallback = callback;\n        break;\n      case 'message':\n        this.onMessageCallback = callback;\n        break;\n      case 'error':\n        this.onErrorCallback = callback;\n        break;\n      default:\n        console.error(`Unknown event: ${event}`);\n    }\n  }\n\n  disconnect() {\n    this.isConnected = false;\n    this.currentConnection = null;\n    // 注意：这里不关闭连接池中的所有连接，只重置当前连接引用\n    if (this.onDisconnectCallback) {\n      this.onDisconnectCallback();\n    }\n  }\n\n  reconnect() {\n    console.log('🔄 手动重连WebSocket...');\n    this.connectionPool.reconnectAll();\n  }\n\n  getConnectionStats() {\n    return this.connectionPool.getConnectionStats();\n  }\n\n  closeAllConnections() {\n    console.log('🔌 关闭所有连接');\n    this.connectionPool.closeAllConnections();\n    this.isConnected = false;\n    this.currentConnection = null;\n  }\n}\n\nconst instance = new WebSocketService();\nexport default instance;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}