{"ast":null,"code":"// frontend/src/components/SimpleWebSocketService.js\nimport{io}from'socket.io-client';class SimpleWebSocketService{constructor(){this.socket=null;this.isConnected=false;this.onConnectCallback=null;this.onDisconnectCallback=null;this.onMessageCallback=null;this.onErrorCallback=null;this.userId=this.generateUserId();}generateUserId(){if(typeof window==='undefined'){return\"user_\".concat(Date.now(),\"_\").concat(Math.random().toString(36).substr(2,9));}let userId=localStorage.getItem('websocket_user_id');if(!userId){userId=\"user_\".concat(Date.now(),\"_\").concat(Math.random().toString(36).substr(2,9));localStorage.setItem('websocket_user_id',userId);}return userId;}connect(url){var _this=this;console.log('🔌 连接到:',url);// 先断开现有连接\nif(this.socket){this.socket.disconnect();this.socket=null;}try{// 添加用户ID到连接参数\nconst connectionUrl=\"\".concat(url,\"?user_id=\").concat(this.userId);// 使用Socket.IO连接\nthis.socket=io(connectionUrl,{transports:['websocket','polling'],timeout:20000,forceNew:true,reconnection:true,reconnectionAttempts:5,reconnectionDelay:1000});this.socket.on('connect',()=>{console.log('✅ WebSocket连接成功');this.isConnected=true;if(this.onConnectCallback){this.onConnectCallback();}});this.socket.on('disconnect',reason=>{console.log('❌ WebSocket断开连接:',reason);this.isConnected=false;if(this.onDisconnectCallback){this.onDisconnectCallback(reason);}});this.socket.on('connect_error',error=>{console.error('❌ WebSocket连接错误:',error);this.isConnected=false;if(this.onErrorCallback){this.onErrorCallback(error);}});this.socket.on('reconnect',attemptNumber=>{console.log('🔄 WebSocket重连成功，尝试次数:',attemptNumber);this.isConnected=true;if(this.onConnectCallback){this.onConnectCallback();}});this.socket.on('reconnect_error',error=>{console.error('❌ WebSocket重连失败:',error);this.isConnected=false;});// 监听连接成功事件\nthis.socket.on('connection_successful',data=>{console.log('🎉 收到连接成功确认:',data);this.isConnected=true;if(this.onConnectCallback){this.onConnectCallback();}});// 监听服务器统计\nthis.socket.on('server_stats',stats=>{console.log('📊 服务器统计:',stats);});// 监听所有消息\nthis.socket.onAny(function(eventName){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}console.log('📨 收到消息:',eventName,args);if(_this.onMessageCallback){const message=args[0]||{};_this.onMessageCallback(message);}});// 特别监听广播消息\nthis.socket.on('broadcast',data=>{console.log('📡 收到广播消息:',data);if(this.onMessageCallback){this.onMessageCallback(data);}});}catch(error){console.error('❌ WebSocket初始化失败:',error);if(this.onErrorCallback){this.onErrorCallback(error);}}}send(event,data){if(!this.isConnected||!this.socket){console.error('❌ WebSocket未连接');return;}console.log('📤 发送消息:',{event,data});try{this.socket.emit(event,data);}catch(error){console.error('❌ 发送消息失败:',error);if(this.onErrorCallback){this.onErrorCallback(error);}}}on(event,callback){switch(event){case'connect':this.onConnectCallback=callback;break;case'disconnect':this.onDisconnectCallback=callback;break;case'message':this.onMessageCallback=callback;break;case'error':this.onErrorCallback=callback;break;default:console.error(\"Unknown event: \".concat(event));}}disconnect(){this.isConnected=false;if(this.socket){this.socket.disconnect();this.socket=null;}if(this.onDisconnectCallback){this.onDisconnectCallback();}}reconnect(){console.log('🔄 手动重连WebSocket...');if(this.socket){this.socket.disconnect();}// 重新连接\nsetTimeout(()=>{this.connect('http://localhost:8008');},1000);}getConnectionStats(){var _this$socket;return{connected:this.isConnected,userId:this.userId,socketId:((_this$socket=this.socket)===null||_this$socket===void 0?void 0:_this$socket.id)||null};}}const instance=new SimpleWebSocketService();export default instance;","map":{"version":3,"names":["io","SimpleWebSocketService","constructor","socket","isConnected","onConnectCallback","onDisconnectCallback","onMessageCallback","onErrorCallback","userId","generateUserId","window","concat","Date","now","Math","random","toString","substr","localStorage","getItem","setItem","connect","url","_this","console","log","disconnect","connectionUrl","transports","timeout","forceNew","reconnection","reconnectionAttempts","reconnectionDelay","on","reason","error","attemptNumber","data","stats","onAny","eventName","_len","arguments","length","args","Array","_key","message","send","event","emit","callback","reconnect","setTimeout","getConnectionStats","_this$socket","connected","socketId","id","instance"],"sources":["/Users/Apple/Desktop/multi-agent-dsl-final/frontend/src/components/SimpleWebSocketService.js"],"sourcesContent":["// frontend/src/components/SimpleWebSocketService.js\nimport { io } from 'socket.io-client';\n\nclass SimpleWebSocketService {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n    this.onConnectCallback = null;\n    this.onDisconnectCallback = null;\n    this.onMessageCallback = null;\n    this.onErrorCallback = null;\n    this.userId = this.generateUserId();\n  }\n\n  generateUserId() {\n    if (typeof window === 'undefined') {\n      return `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    let userId = localStorage.getItem('websocket_user_id');\n    if (!userId) {\n      userId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      localStorage.setItem('websocket_user_id', userId);\n    }\n    return userId;\n  }\n\n  connect(url) {\n    console.log('🔌 连接到:', url);\n    \n    // 先断开现有连接\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    \n    try {\n      // 添加用户ID到连接参数\n      const connectionUrl = `${url}?user_id=${this.userId}`;\n      \n      // 使用Socket.IO连接\n      this.socket = io(connectionUrl, {\n        transports: ['websocket', 'polling'],\n        timeout: 20000,\n        forceNew: true,\n        reconnection: true,\n        reconnectionAttempts: 5,\n        reconnectionDelay: 1000\n      });\n\n      this.socket.on('connect', () => {\n        console.log('✅ WebSocket连接成功');\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n\n      this.socket.on('disconnect', (reason) => {\n        console.log('❌ WebSocket断开连接:', reason);\n        this.isConnected = false;\n        if (this.onDisconnectCallback) {\n          this.onDisconnectCallback(reason);\n        }\n      });\n\n      this.socket.on('connect_error', (error) => {\n        console.error('❌ WebSocket连接错误:', error);\n        this.isConnected = false;\n        if (this.onErrorCallback) {\n          this.onErrorCallback(error);\n        }\n      });\n\n      this.socket.on('reconnect', (attemptNumber) => {\n        console.log('🔄 WebSocket重连成功，尝试次数:', attemptNumber);\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n\n      this.socket.on('reconnect_error', (error) => {\n        console.error('❌ WebSocket重连失败:', error);\n        this.isConnected = false;\n      });\n\n      // 监听连接成功事件\n      this.socket.on('connection_successful', (data) => {\n        console.log('🎉 收到连接成功确认:', data);\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n\n      // 监听服务器统计\n      this.socket.on('server_stats', (stats) => {\n        console.log('📊 服务器统计:', stats);\n      });\n\n      // 监听所有消息\n      this.socket.onAny((eventName, ...args) => {\n        console.log('📨 收到消息:', eventName, args);\n        if (this.onMessageCallback) {\n          const message = args[0] || {};\n          this.onMessageCallback(message);\n        }\n      });\n\n      // 特别监听广播消息\n      this.socket.on('broadcast', (data) => {\n        console.log('📡 收到广播消息:', data);\n        if (this.onMessageCallback) {\n          this.onMessageCallback(data);\n        }\n      });\n\n    } catch (error) {\n      console.error('❌ WebSocket初始化失败:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    }\n  }\n\n  send(event, data) {\n    if (!this.isConnected || !this.socket) {\n      console.error('❌ WebSocket未连接');\n      return;\n    }\n\n    console.log('📤 发送消息:', { event, data });\n    \n    try {\n      this.socket.emit(event, data);\n    } catch (error) {\n      console.error('❌ 发送消息失败:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    }\n  }\n\n  on(event, callback) {\n    switch (event) {\n      case 'connect':\n        this.onConnectCallback = callback;\n        break;\n      case 'disconnect':\n        this.onDisconnectCallback = callback;\n        break;\n      case 'message':\n        this.onMessageCallback = callback;\n        break;\n      case 'error':\n        this.onErrorCallback = callback;\n        break;\n      default:\n        console.error(`Unknown event: ${event}`);\n    }\n  }\n\n  disconnect() {\n    this.isConnected = false;\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    if (this.onDisconnectCallback) {\n      this.onDisconnectCallback();\n    }\n  }\n\n  reconnect() {\n    console.log('🔄 手动重连WebSocket...');\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n    // 重新连接\n    setTimeout(() => {\n      this.connect('http://localhost:8008');\n    }, 1000);\n  }\n\n  getConnectionStats() {\n    return {\n      connected: this.isConnected,\n      userId: this.userId,\n      socketId: this.socket?.id || null\n    };\n  }\n}\n\nconst instance = new SimpleWebSocketService();\nexport default instance;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}