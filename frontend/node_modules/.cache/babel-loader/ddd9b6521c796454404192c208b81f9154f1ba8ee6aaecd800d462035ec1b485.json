{"ast":null,"code":"var _jsxFileName = \"/Users/Apple/Desktop/multi-agent-dsl-final/frontend/src/pages/HomePage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PageHeader from '../components/PageHeader';\nimport AgentArchitecture from '../components/AgentArchitecture';\nimport AutonomousDrivingCard from '../components/AutonomousDrivingCard';\nimport WeatherAlertCard from '../components/WeatherAlertCard';\nimport ParkingUpdateCard from '../components/ParkingUpdateCard';\nimport SafetyInspectionCard from '../components/SafetyInspectionCard';\nimport InteractionHistory from '../components/InteractionHistory';\nimport ReportSidebar from '../components/ReportSidebar';\nimport SimpleWebSocketService from '../components/SimpleWebSocketService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomePage = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [readyState, setReadyState] = useState(0); // 0 = connecting, 1 = open, 2 = closing, 3 = closed\n  const [connectionStats, setConnectionStats] = useState(null);\n  const [isReportSidebarOpen, setIsReportSidebarOpen] = useState(false);\n  const [showReportsOnly, setShowReportsOnly] = useState(false);\n  const [connectionError, setConnectionError] = useState(null);\n  const [isRetrying, setIsRetrying] = useState(false);\n  useEffect(() => {\n    const wsUrl = `http://localhost:8008`;\n    console.log('🔌 尝试连接到:', wsUrl);\n    SimpleWebSocketService.connect(wsUrl);\n    const handleConnect = () => {\n      setReadyState(1); // WebSocket.OPEN\n      setConnectionError(null);\n      setIsRetrying(false);\n      console.log('✅ WebSocket connected, readyState set to 1');\n      // 更新连接统计信息\n      setConnectionStats(SimpleWebSocketService.getConnectionStats());\n    };\n    const handleDisconnect = () => {\n      setReadyState(3); // WebSocket.CLOSED\n      console.log('❌ WebSocket disconnected, readyState set to 3');\n    };\n    const handleMessage = data => {\n      try {\n        console.log('📨 Received WebSocket message:', data);\n        const message = typeof data === 'string' ? JSON.parse(data) : data;\n        const messageWithTimestamp = {\n          ...message,\n          timestamp: message.timestamp || new Date().toISOString()\n        };\n        console.log('📝 Adding message to state:', messageWithTimestamp);\n\n        // 特别关注报告消息\n        if (messageWithTimestamp.type === 'analysis_report') {\n          console.log('📊 Report message received:', messageWithTimestamp);\n        }\n        setMessages(prevMessages => [...prevMessages, messageWithTimestamp]);\n      } catch (error) {\n        console.error('❌ Error parsing WebSocket message:', error);\n        setMessages(prevMessages => [...prevMessages, {\n          type: 'raw',\n          payload: data,\n          timestamp: new Date().toISOString()\n        }]);\n      }\n    };\n    const handleError = error => {\n      console.error('❌ WebSocket error:', error);\n      setReadyState(3); // WebSocket.CLOSED\n      setConnectionError(error.message || '连接失败');\n      setIsRetrying(false);\n    };\n    SimpleWebSocketService.on('connect', handleConnect);\n    SimpleWebSocketService.on('disconnect', handleDisconnect);\n    SimpleWebSocketService.on('message', handleMessage);\n    SimpleWebSocketService.on('error', handleError);\n    return () => {\n      console.log('🧹 Cleaning up WebSocket connection');\n      SimpleWebSocketService.disconnect();\n    };\n  }, []);\n  const handleSend = async (task, data) => {\n    try {\n      console.log('Sending task:', task, 'with data:', data, 'readyState:', readyState);\n\n      // 根据任务类型发送到对应的API端点\n      let endpoint = '';\n      let payload = data;\n      switch (task) {\n        case 'autonomous_driving_task':\n          endpoint = '/events/autonomous_driving';\n          payload = {\n            start_location: data.start_location || 'A',\n            end_location: data.end_location || 'B',\n            passengers: data.passengers || 2\n          };\n          break;\n        case 'weather_alert_task':\n          endpoint = '/events/weather_alert';\n          payload = {\n            area: data.location || 'City Center',\n            alert_type: data.alert_type || 'heavy_rain',\n            severity: data.severity || 8\n          };\n          break;\n        case 'parking_update_task':\n          endpoint = '/events/parking_update';\n          payload = {\n            location: data.location || 'City Center Parking',\n            available_spots: data.available_spots || 150\n          };\n          break;\n        case 'safety_inspection_task':\n          endpoint = '/events/safety_inspection';\n          payload = {\n            location: data.location || 'Bridge B',\n            safety_status: data.require_human_intervention ? 'warning' : 'ok',\n            require_human_intervention: data.require_human_intervention || true\n          };\n          break;\n        default:\n          console.error('Unknown task type:', task);\n          return;\n      }\n      const response = await fetch(`http://localhost:8008${endpoint}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      if (response.ok) {\n        console.log('Task sent successfully');\n      } else {\n        console.error('Failed to send task:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error sending task:', error);\n    }\n  };\n  const sendGenerateReport = async () => {\n    try {\n      console.log('Generating report...');\n\n      // 获取最近的交互记录\n      const recentEvents = messages.slice(-5).map(msg => ({\n        type: msg.type,\n        payload: msg.payload,\n        title: msg.title,\n        timestamp: msg.timestamp\n      }));\n      const response = await fetch('http://localhost:8008/generate-report', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          events: recentEvents\n        })\n      });\n      if (response.ok) {\n        console.log('Report generation started');\n      } else {\n        console.error('Failed to generate report:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error generating report:', error);\n    }\n  };\n  const clearHistory = () => {\n    setMessages([]);\n  };\n\n  // 手动重连功能\n  const handleRetryConnection = () => {\n    setIsRetrying(true);\n    setConnectionError(null);\n    console.log('🔄 手动重连WebSocket');\n    SimpleWebSocketService.reconnect();\n\n    // 5秒后如果还在重试状态，显示错误\n    setTimeout(() => {\n      if (isRetrying) {\n        setIsRetrying(false);\n        setConnectionError('重连超时，请检查服务器状态');\n      }\n    }, 5000);\n  };\n\n  // 报告侧边栏控制函数\n  const openReportSidebar = () => {\n    setIsReportSidebarOpen(true);\n  };\n  const closeReportSidebar = () => {\n    setIsReportSidebarOpen(false);\n  };\n\n  // 切换报告显示模式\n  const toggleReportsOnly = () => {\n    setShowReportsOnly(!showReportsOnly);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"homepage\",\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(AgentArchitecture, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"event-cards-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-2\",\n          children: [/*#__PURE__*/_jsxDEV(AutonomousDrivingCard, {\n            onSend: data => handleSend('autonomous_driving_task', data),\n            readyState: readyState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(WeatherAlertCard, {\n            onSend: data => handleSend('weather_alert_task', data),\n            readyState: readyState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ParkingUpdateCard, {\n            onSend: data => handleSend('parking_update_task', data),\n            readyState: readyState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SafetyInspectionCard, {\n            onSend: data => handleSend('safety_inspection_task', data),\n            readyState: readyState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InteractionHistory, {\n        events: messages,\n        readyState: readyState,\n        connectionStats: connectionStats,\n        connectionError: connectionError,\n        isRetrying: isRetrying,\n        onGenerateReport: sendGenerateReport,\n        onClear: clearHistory,\n        onOpenReportSidebar: openReportSidebar,\n        onRetryConnection: handleRetryConnection,\n        showReportsOnly: showReportsOnly,\n        onToggleReportsOnly: toggleReportsOnly\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReportSidebar, {\n      events: messages,\n      isOpen: isReportSidebarOpen,\n      onClose: closeReportSidebar,\n      onGenerateReport: sendGenerateReport\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"/o4kL4pHvxeapO5FYUTxbOdpWwU=\");\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","PageHeader","AgentArchitecture","AutonomousDrivingCard","WeatherAlertCard","ParkingUpdateCard","SafetyInspectionCard","InteractionHistory","ReportSidebar","SimpleWebSocketService","jsxDEV","_jsxDEV","HomePage","_s","messages","setMessages","readyState","setReadyState","connectionStats","setConnectionStats","isReportSidebarOpen","setIsReportSidebarOpen","showReportsOnly","setShowReportsOnly","connectionError","setConnectionError","isRetrying","setIsRetrying","wsUrl","console","log","connect","handleConnect","getConnectionStats","handleDisconnect","handleMessage","data","message","JSON","parse","messageWithTimestamp","timestamp","Date","toISOString","type","prevMessages","error","payload","handleError","on","disconnect","handleSend","task","endpoint","start_location","end_location","passengers","area","location","alert_type","severity","available_spots","safety_status","require_human_intervention","response","fetch","method","headers","body","stringify","ok","statusText","sendGenerateReport","recentEvents","slice","map","msg","title","events","clearHistory","handleRetryConnection","reconnect","setTimeout","openReportSidebar","closeReportSidebar","toggleReportsOnly","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSend","onGenerateReport","onClear","onOpenReportSidebar","onRetryConnection","onToggleReportsOnly","isOpen","onClose","_c","$RefreshReg$"],"sources":["/Users/Apple/Desktop/multi-agent-dsl-final/frontend/src/pages/HomePage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PageHeader from '../components/PageHeader';\nimport AgentArchitecture from '../components/AgentArchitecture';\nimport AutonomousDrivingCard from '../components/AutonomousDrivingCard';\nimport WeatherAlertCard from '../components/WeatherAlertCard';\nimport ParkingUpdateCard from '../components/ParkingUpdateCard';\nimport SafetyInspectionCard from '../components/SafetyInspectionCard';\nimport InteractionHistory from '../components/InteractionHistory';\nimport ReportSidebar from '../components/ReportSidebar';\nimport SimpleWebSocketService from '../components/SimpleWebSocketService';\n\nconst HomePage = () => {\n  const [messages, setMessages] = useState([]);\n  const [readyState, setReadyState] = useState(0); // 0 = connecting, 1 = open, 2 = closing, 3 = closed\n  const [connectionStats, setConnectionStats] = useState(null);\n  const [isReportSidebarOpen, setIsReportSidebarOpen] = useState(false);\n  const [showReportsOnly, setShowReportsOnly] = useState(false);\n  const [connectionError, setConnectionError] = useState(null);\n  const [isRetrying, setIsRetrying] = useState(false);\n\n  useEffect(() => {\n    const wsUrl = `http://localhost:8008`;\n    console.log('🔌 尝试连接到:', wsUrl);\n    SimpleWebSocketService.connect(wsUrl);\n\n    const handleConnect = () => {\n      setReadyState(1); // WebSocket.OPEN\n      setConnectionError(null);\n      setIsRetrying(false);\n      console.log('✅ WebSocket connected, readyState set to 1');\n      // 更新连接统计信息\n      setConnectionStats(SimpleWebSocketService.getConnectionStats());\n    };\n\n    const handleDisconnect = () => {\n      setReadyState(3); // WebSocket.CLOSED\n      console.log('❌ WebSocket disconnected, readyState set to 3');\n    };\n\n    const handleMessage = (data) => {\n      try {\n        console.log('📨 Received WebSocket message:', data);\n        const message = typeof data === 'string' ? JSON.parse(data) : data;\n        const messageWithTimestamp = {\n          ...message,\n          timestamp: message.timestamp || new Date().toISOString()\n        };\n        console.log('📝 Adding message to state:', messageWithTimestamp);\n        \n        // 特别关注报告消息\n        if (messageWithTimestamp.type === 'analysis_report') {\n          console.log('📊 Report message received:', messageWithTimestamp);\n        }\n        \n        setMessages((prevMessages) => [...prevMessages, messageWithTimestamp]);\n      } catch (error) {\n        console.error('❌ Error parsing WebSocket message:', error);\n        setMessages((prevMessages) => [...prevMessages, { \n          type: 'raw', \n          payload: data, \n          timestamp: new Date().toISOString() \n        }]);\n      }\n    };\n\n    const handleError = (error) => {\n      console.error('❌ WebSocket error:', error);\n      setReadyState(3); // WebSocket.CLOSED\n      setConnectionError(error.message || '连接失败');\n      setIsRetrying(false);\n    };\n\n    SimpleWebSocketService.on('connect', handleConnect);\n    SimpleWebSocketService.on('disconnect', handleDisconnect);\n    SimpleWebSocketService.on('message', handleMessage);\n    SimpleWebSocketService.on('error', handleError);\n\n    return () => {\n      console.log('🧹 Cleaning up WebSocket connection');\n      SimpleWebSocketService.disconnect();\n    };\n  }, []);\n\n  const handleSend = async (task, data) => {\n    try {\n      console.log('Sending task:', task, 'with data:', data, 'readyState:', readyState);\n      \n      // 根据任务类型发送到对应的API端点\n      let endpoint = '';\n      let payload = data;\n      \n      switch (task) {\n        case 'autonomous_driving_task':\n          endpoint = '/events/autonomous_driving';\n          payload = {\n            start_location: data.start_location || 'A',\n            end_location: data.end_location || 'B',\n            passengers: data.passengers || 2\n          };\n          break;\n        case 'weather_alert_task':\n          endpoint = '/events/weather_alert';\n          payload = {\n            area: data.location || 'City Center',\n            alert_type: data.alert_type || 'heavy_rain',\n            severity: data.severity || 8\n          };\n          break;\n        case 'parking_update_task':\n          endpoint = '/events/parking_update';\n          payload = {\n            location: data.location || 'City Center Parking',\n            available_spots: data.available_spots || 150\n          };\n          break;\n        case 'safety_inspection_task':\n          endpoint = '/events/safety_inspection';\n          payload = {\n            location: data.location || 'Bridge B',\n            safety_status: data.require_human_intervention ? 'warning' : 'ok',\n            require_human_intervention: data.require_human_intervention || true\n          };\n          break;\n        default:\n          console.error('Unknown task type:', task);\n          return;\n      }\n      \n      const response = await fetch(`http://localhost:8008${endpoint}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload)\n      });\n      \n      if (response.ok) {\n        console.log('Task sent successfully');\n      } else {\n        console.error('Failed to send task:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error sending task:', error);\n    }\n  };\n\n  const sendGenerateReport = async () => {\n    try {\n      console.log('Generating report...');\n      \n      // 获取最近的交互记录\n      const recentEvents = messages.slice(-5).map(msg => ({\n        type: msg.type,\n        payload: msg.payload,\n        title: msg.title,\n        timestamp: msg.timestamp\n      }));\n      \n      const response = await fetch('http://localhost:8008/generate-report', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          events: recentEvents\n        })\n      });\n      \n      if (response.ok) {\n        console.log('Report generation started');\n      } else {\n        console.error('Failed to generate report:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error generating report:', error);\n    }\n  };\n\n  const clearHistory = () => {\n    setMessages([]);\n  };\n\n  // 手动重连功能\n  const handleRetryConnection = () => {\n    setIsRetrying(true);\n    setConnectionError(null);\n    console.log('🔄 手动重连WebSocket');\n    SimpleWebSocketService.reconnect();\n    \n    // 5秒后如果还在重试状态，显示错误\n    setTimeout(() => {\n      if (isRetrying) {\n        setIsRetrying(false);\n        setConnectionError('重连超时，请检查服务器状态');\n      }\n    }, 5000);\n  };\n\n  // 报告侧边栏控制函数\n  const openReportSidebar = () => {\n    setIsReportSidebarOpen(true);\n  };\n\n  const closeReportSidebar = () => {\n    setIsReportSidebarOpen(false);\n  };\n\n  // 切换报告显示模式\n  const toggleReportsOnly = () => {\n    setShowReportsOnly(!showReportsOnly);\n  };\n\n  return (\n    <div className=\"homepage\">\n      <PageHeader />\n      \n      <div className=\"container\">\n        <AgentArchitecture />\n        \n        <div className=\"event-cards-section\">\n          <div className=\"grid grid-2\">\n            <AutonomousDrivingCard \n              onSend={(data) => handleSend('autonomous_driving_task', data)} \n              readyState={readyState} \n            />\n            <WeatherAlertCard \n              onSend={(data) => handleSend('weather_alert_task', data)} \n              readyState={readyState} \n            />\n            <ParkingUpdateCard \n              onSend={(data) => handleSend('parking_update_task', data)} \n              readyState={readyState} \n            />\n            <SafetyInspectionCard \n              onSend={(data) => handleSend('safety_inspection_task', data)} \n              readyState={readyState} \n            />\n          </div>\n        </div>\n        \n        <InteractionHistory \n          events={messages} \n          readyState={readyState} \n          connectionStats={connectionStats}\n          connectionError={connectionError}\n          isRetrying={isRetrying}\n          onGenerateReport={sendGenerateReport} \n          onClear={clearHistory}\n          onOpenReportSidebar={openReportSidebar}\n          onRetryConnection={handleRetryConnection}\n          showReportsOnly={showReportsOnly}\n          onToggleReportsOnly={toggleReportsOnly}\n        />\n      </div>\n      \n      {/* 报告侧边栏 */}\n      <ReportSidebar \n        events={messages}\n        isOpen={isReportSidebarOpen}\n        onClose={closeReportSidebar}\n        onGenerateReport={sendGenerateReport}\n      />\n    </div>\n  );\n};\n\nexport default HomePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}