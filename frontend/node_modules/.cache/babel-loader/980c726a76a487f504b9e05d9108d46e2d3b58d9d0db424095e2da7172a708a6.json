{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nconst useWebSocket = (url, onMessage) => {\n  _s();\n  const socket = useRef(null);\n  const interval = useRef(null);\n  const [readyState, setReadyState] = useState(WebSocket.CONNECTING);\n  useEffect(() => {\n    socket.current = new WebSocket(url);\n    setReadyState(WebSocket.CONNECTING);\n    socket.current.onopen = () => {\n      setReadyState(WebSocket.OPEN);\n    };\n    socket.current.onmessage = event => {\n      try {\n        const message = JSON.parse(event.data);\n        if (message.type === 'ping') {\n          if (socket.current && socket.current.readyState === WebSocket.OPEN) {\n            socket.current.send(JSON.stringify({\n              type: 'pong'\n            }));\n          }\n        } else {\n          onMessage(message);\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n    socket.current.onclose = event => {\n      console.log('WebSocket disconnected. Code:', event.code, 'Reason:', event.reason, 'Was Clean:', event.wasClean);\n      setReadyState(WebSocket.CLOSED);\n    };\n    socket.current.onerror = error => {\n      console.error('WebSocket error:', error);\n      setReadyState(WebSocket.CLOSED);\n    };\n    return () => {\n      if (socket.current) {\n        socket.current.close();\n      }\n    };\n  }, [url, onMessage]);\n  const sendMessage = message => {\n    if (socket.current && socket.current.readyState === WebSocket.OPEN) {\n      socket.current.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected.');\n    }\n  };\n  return {\n    sendMessage,\n    readyState\n  };\n};\n_s(useWebSocket, \"rDHOz8FT/4mCW9xgAgOIeXroo2k=\");\nexport default useWebSocket;","map":{"version":3,"names":["useEffect","useRef","useState","useWebSocket","url","onMessage","_s","socket","interval","readyState","setReadyState","WebSocket","CONNECTING","current","onopen","OPEN","onmessage","event","message","JSON","parse","data","type","send","stringify","error","console","onclose","log","code","reason","wasClean","CLOSED","onerror","close","sendMessage"],"sources":["/Users/Apple/Desktop/multi-agent-dsl-final/frontend/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nconst useWebSocket = (url, onMessage) => {\n  const socket = useRef(null);\n  const interval = useRef(null);\n  const [readyState, setReadyState] = useState(WebSocket.CONNECTING);\n\n  useEffect(() => {\n    socket.current = new WebSocket(url);\n    setReadyState(WebSocket.CONNECTING);\n\n    socket.current.onopen = () => {\n      setReadyState(WebSocket.OPEN);\n    };\n\n    socket.current.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        if (message.type === 'ping') {\n          if (socket.current && socket.current.readyState === WebSocket.OPEN) {\n            socket.current.send(JSON.stringify({ type: 'pong' }));\n          }\n        } else {\n          onMessage(message);\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n\n    socket.current.onclose = (event) => {\n      console.log('WebSocket disconnected. Code:', event.code, 'Reason:', event.reason, 'Was Clean:', event.wasClean);\n      setReadyState(WebSocket.CLOSED);\n    };\n\n    socket.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setReadyState(WebSocket.CLOSED);\n    };\n\n    return () => {\n      if (socket.current) {\n        socket.current.close();\n      }\n    };\n  }, [url, onMessage]);\n\n  const sendMessage = (message) => {\n    if (socket.current && socket.current.readyState === WebSocket.OPEN) {\n      socket.current.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected.');\n    }\n  };\n\n  return { sendMessage, readyState };\n};\n\nexport default useWebSocket;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAEnD,MAAMC,YAAY,GAAGA,CAACC,GAAG,EAAEC,SAAS,KAAK;EAAAC,EAAA;EACvC,MAAMC,MAAM,GAAGN,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMO,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAACS,SAAS,CAACC,UAAU,CAAC;EAElEZ,SAAS,CAAC,MAAM;IACdO,MAAM,CAACM,OAAO,GAAG,IAAIF,SAAS,CAACP,GAAG,CAAC;IACnCM,aAAa,CAACC,SAAS,CAACC,UAAU,CAAC;IAEnCL,MAAM,CAACM,OAAO,CAACC,MAAM,GAAG,MAAM;MAC5BJ,aAAa,CAACC,SAAS,CAACI,IAAI,CAAC;IAC/B,CAAC;IAEDR,MAAM,CAACM,OAAO,CAACG,SAAS,GAAIC,KAAK,IAAK;MACpC,IAAI;QACF,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;QACtC,IAAIH,OAAO,CAACI,IAAI,KAAK,MAAM,EAAE;UAC3B,IAAIf,MAAM,CAACM,OAAO,IAAIN,MAAM,CAACM,OAAO,CAACJ,UAAU,KAAKE,SAAS,CAACI,IAAI,EAAE;YAClER,MAAM,CAACM,OAAO,CAACU,IAAI,CAACJ,IAAI,CAACK,SAAS,CAAC;cAAEF,IAAI,EAAE;YAAO,CAAC,CAAC,CAAC;UACvD;QACF,CAAC,MAAM;UACLjB,SAAS,CAACa,OAAO,CAAC;QACpB;MACF,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC;IAEDlB,MAAM,CAACM,OAAO,CAACc,OAAO,GAAIV,KAAK,IAAK;MAClCS,OAAO,CAACE,GAAG,CAAC,+BAA+B,EAAEX,KAAK,CAACY,IAAI,EAAE,SAAS,EAAEZ,KAAK,CAACa,MAAM,EAAE,YAAY,EAAEb,KAAK,CAACc,QAAQ,CAAC;MAC/GrB,aAAa,CAACC,SAAS,CAACqB,MAAM,CAAC;IACjC,CAAC;IAEDzB,MAAM,CAACM,OAAO,CAACoB,OAAO,GAAIR,KAAK,IAAK;MAClCC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACxCf,aAAa,CAACC,SAAS,CAACqB,MAAM,CAAC;IACjC,CAAC;IAED,OAAO,MAAM;MACX,IAAIzB,MAAM,CAACM,OAAO,EAAE;QAClBN,MAAM,CAACM,OAAO,CAACqB,KAAK,CAAC,CAAC;MACxB;IACF,CAAC;EACH,CAAC,EAAE,CAAC9B,GAAG,EAAEC,SAAS,CAAC,CAAC;EAEpB,MAAM8B,WAAW,GAAIjB,OAAO,IAAK;IAC/B,IAAIX,MAAM,CAACM,OAAO,IAAIN,MAAM,CAACM,OAAO,CAACJ,UAAU,KAAKE,SAAS,CAACI,IAAI,EAAE;MAClER,MAAM,CAACM,OAAO,CAACU,IAAI,CAACJ,IAAI,CAACK,SAAS,CAACN,OAAO,CAAC,CAAC;IAC9C,CAAC,MAAM;MACLQ,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAC;IAC9C;EACF,CAAC;EAED,OAAO;IAAEU,WAAW;IAAE1B;EAAW,CAAC;AACpC,CAAC;AAACH,EAAA,CAtDIH,YAAY;AAwDlB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}