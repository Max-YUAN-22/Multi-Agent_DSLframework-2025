{"ast":null,"code":"// frontend/src/components/WebSocketService.js\nclass WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.onConnectCallback = null;\n    this.onDisconnectCallback = null;\n    this.onMessageCallback = null;\n    this.onErrorCallback = null;\n    this.pollingInterval = null;\n    this.isConnected = false;\n  }\n  connect(url) {\n    console.log('üîå ËøûÊé•Âà∞:', url);\n\n    // Ê®°ÊãüWebSocketËøûÊé•\n    this.isConnected = true;\n    if (this.onConnectCallback) {\n      this.onConnectCallback();\n    }\n\n    // ÂºÄÂßãËΩÆËØ¢Ê£ÄÊü•ËøûÊé•Áä∂ÊÄÅ\n    this.startPolling();\n  }\n  startPolling() {\n    this.pollingInterval = setInterval(() => {\n      if (this.isConnected) {\n        // Ê®°Êãü‰øùÊåÅËøûÊé•\n        console.log('üîÑ ‰øùÊåÅËøûÊé•...');\n      }\n    }, 30000);\n  }\n  send(event, data) {\n    if (!this.isConnected) {\n      console.error('‚ùå ÊúçÂä°Êú™ËøûÊé•');\n      return;\n    }\n    console.log('üì§ ÂèëÈÄÅÊ∂àÊÅØ:', {\n      event,\n      data\n    });\n\n    // Áõ¥Êé•ÂèëÈÄÅHTTPËØ∑Ê±ÇÂà∞ÂêéÁ´Ø\n    const message = {\n      type: event,\n      data: data\n    };\n    fetch(`http://localhost:8008/simulate/${data.entry_point || 'test'}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json()).then(result => {\n      console.log('‚úÖ ËØ∑Ê±ÇÊàêÂäü:', result);\n      // Ê®°ÊãüÊî∂Âà∞ÂìçÂ∫îÊ∂àÊÅØ\n      if (this.onMessageCallback) {\n        this.onMessageCallback(JSON.stringify({\n          type: 'response',\n          payload: result,\n          timestamp: new Date().toISOString()\n        }));\n      }\n    }).catch(error => {\n      console.error('‚ùå ËØ∑Ê±ÇÂ§±Ë¥•:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    });\n  }\n  on(event, callback) {\n    switch (event) {\n      case 'connect':\n        this.onConnectCallback = callback;\n        break;\n      case 'disconnect':\n        this.onDisconnectCallback = callback;\n        break;\n      case 'message':\n        this.onMessageCallback = callback;\n        break;\n      case 'error':\n        this.onErrorCallback = callback;\n        break;\n      default:\n        console.error(`Unknown event: ${event}`);\n    }\n  }\n  disconnect() {\n    this.isConnected = false;\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n    }\n    if (this.onDisconnectCallback) {\n      this.onDisconnectCallback();\n    }\n  }\n}\nconst instance = new WebSocketService();\nexport default instance;","map":{"version":3,"names":["WebSocketService","constructor","socket","onConnectCallback","onDisconnectCallback","onMessageCallback","onErrorCallback","pollingInterval","isConnected","connect","url","console","log","startPolling","setInterval","send","event","data","error","message","type","fetch","entry_point","method","headers","body","JSON","stringify","then","response","json","result","payload","timestamp","Date","toISOString","catch","on","callback","disconnect","clearInterval","instance"],"sources":["/Users/Apple/Desktop/multi-agent-dsl-final/frontend/src/components/WebSocketService.js"],"sourcesContent":["// frontend/src/components/WebSocketService.js\nclass WebSocketService {\n  socket = null;\n  onConnectCallback = null;\n  onDisconnectCallback = null;\n  onMessageCallback = null;\n  onErrorCallback = null;\n  pollingInterval = null;\n  isConnected = false;\n\n  connect(url) {\n    console.log('üîå ËøûÊé•Âà∞:', url);\n    \n    // Ê®°ÊãüWebSocketËøûÊé•\n    this.isConnected = true;\n    \n    if (this.onConnectCallback) {\n      this.onConnectCallback();\n    }\n    \n    // ÂºÄÂßãËΩÆËØ¢Ê£ÄÊü•ËøûÊé•Áä∂ÊÄÅ\n    this.startPolling();\n  }\n\n  startPolling() {\n    this.pollingInterval = setInterval(() => {\n      if (this.isConnected) {\n        // Ê®°Êãü‰øùÊåÅËøûÊé•\n        console.log('üîÑ ‰øùÊåÅËøûÊé•...');\n      }\n    }, 30000);\n  }\n\n  send(event, data) {\n    if (!this.isConnected) {\n      console.error('‚ùå ÊúçÂä°Êú™ËøûÊé•');\n      return;\n    }\n\n    console.log('üì§ ÂèëÈÄÅÊ∂àÊÅØ:', { event, data });\n    \n    // Áõ¥Êé•ÂèëÈÄÅHTTPËØ∑Ê±ÇÂà∞ÂêéÁ´Ø\n    const message = {\n      type: event,\n      data: data\n    };\n\n    fetch(`http://localhost:8008/simulate/${data.entry_point || 'test'}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data)\n    })\n    .then(response => response.json())\n    .then(result => {\n      console.log('‚úÖ ËØ∑Ê±ÇÊàêÂäü:', result);\n      // Ê®°ÊãüÊî∂Âà∞ÂìçÂ∫îÊ∂àÊÅØ\n      if (this.onMessageCallback) {\n        this.onMessageCallback(JSON.stringify({\n          type: 'response',\n          payload: result,\n          timestamp: new Date().toISOString()\n        }));\n      }\n    })\n    .catch(error => {\n      console.error('‚ùå ËØ∑Ê±ÇÂ§±Ë¥•:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    });\n  }\n\n  on(event, callback) {\n    switch (event) {\n      case 'connect':\n        this.onConnectCallback = callback;\n        break;\n      case 'disconnect':\n        this.onDisconnectCallback = callback;\n        break;\n      case 'message':\n        this.onMessageCallback = callback;\n        break;\n      case 'error':\n        this.onErrorCallback = callback;\n        break;\n      default:\n        console.error(`Unknown event: ${event}`);\n    }\n  }\n\n  disconnect() {\n    this.isConnected = false;\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n    }\n    if (this.onDisconnectCallback) {\n      this.onDisconnectCallback();\n    }\n  }\n}\n\nconst instance = new WebSocketService();\nexport default instance;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}