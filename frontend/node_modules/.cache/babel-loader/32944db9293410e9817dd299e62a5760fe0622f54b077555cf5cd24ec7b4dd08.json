{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nconst useWebSocket = (url, onMessage) => {\n  _s();\n  const socket = useRef(null);\n  const [readyState, setReadyState] = useState(WebSocket.CONNECTING);\n  useEffect(() => {\n    if (!socket.current) {\n      socket.current = new WebSocket(url);\n      setReadyState(WebSocket.CONNECTING);\n      socket.current.onopen = () => {\n        setReadyState(WebSocket.OPEN);\n      };\n      socket.current.onmessage = event => {\n        try {\n          const message = JSON.parse(event.data);\n          if (message.type === 'ping') {\n            if (socket.current && socket.current.readyState === WebSocket.OPEN) {\n              socket.current.send(JSON.stringify({\n                type: 'pong'\n              }));\n            }\n          } else {\n            onMessage(message);\n          }\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n      socket.current.onclose = event => {\n        console.log('WebSocket disconnected:', event);\n        setReadyState(WebSocket.CLOSED);\n      };\n      socket.current.onerror = error => {\n        console.error('WebSocket error:', error);\n        setReadyState(WebSocket.CLOSED);\n      };\n    }\n    return () => {\n      if (socket.current) {\n        socket.current.close();\n        socket.current = null;\n      }\n    };\n  }, [url, onMessage]);\n  const sendMessage = message => {\n    if (socket.current && socket.current.readyState === WebSocket.OPEN) {\n      socket.current.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected.');\n    }\n  };\n  return {\n    sendMessage,\n    readyState\n  };\n};\n_s(useWebSocket, \"HiPHt6Z9rOV3Ue5bgjcdNVfPv14=\");\nexport default useWebSocket;","map":{"version":3,"names":["useEffect","useRef","useState","useWebSocket","url","onMessage","_s","socket","readyState","setReadyState","WebSocket","CONNECTING","current","onopen","OPEN","onmessage","event","message","JSON","parse","data","type","send","stringify","error","console","onclose","log","CLOSED","onerror","close","sendMessage"],"sources":["/Users/Apple/Desktop/multi-agent-dsl-final/frontend/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nconst useWebSocket = (url, onMessage) => {\n  const socket = useRef(null);\n  const [readyState, setReadyState] = useState(WebSocket.CONNECTING);\n\n  useEffect(() => {\n    if (!socket.current) {\n      socket.current = new WebSocket(url);\n      setReadyState(WebSocket.CONNECTING);\n\n      socket.current.onopen = () => {\n        setReadyState(WebSocket.OPEN);\n      };\n\n      socket.current.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          if (message.type === 'ping') {\n            if (socket.current && socket.current.readyState === WebSocket.OPEN) {\n              socket.current.send(JSON.stringify({ type: 'pong' }));\n            }\n          } else {\n            onMessage(message);\n          }\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      socket.current.onclose = (event) => {\n        console.log('WebSocket disconnected:', event);\n        setReadyState(WebSocket.CLOSED);\n      };\n\n      socket.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setReadyState(WebSocket.CLOSED);\n      };\n    }\n\n    return () => {\n      if (socket.current) {\n        socket.current.close();\n        socket.current = null;\n      }\n    };\n  }, [url, onMessage]);\n\n  const sendMessage = (message) => {\n    if (socket.current && socket.current.readyState === WebSocket.OPEN) {\n      socket.current.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected.');\n    }\n  };\n\n  return { sendMessage, readyState };\n};\n\nexport default useWebSocket;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAEnD,MAAMC,YAAY,GAAGA,CAACC,GAAG,EAAEC,SAAS,KAAK;EAAAC,EAAA;EACvC,MAAMC,MAAM,GAAGN,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAACQ,SAAS,CAACC,UAAU,CAAC;EAElEX,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,MAAM,CAACK,OAAO,EAAE;MACnBL,MAAM,CAACK,OAAO,GAAG,IAAIF,SAAS,CAACN,GAAG,CAAC;MACnCK,aAAa,CAACC,SAAS,CAACC,UAAU,CAAC;MAEnCJ,MAAM,CAACK,OAAO,CAACC,MAAM,GAAG,MAAM;QAC5BJ,aAAa,CAACC,SAAS,CAACI,IAAI,CAAC;MAC/B,CAAC;MAEDP,MAAM,CAACK,OAAO,CAACG,SAAS,GAAIC,KAAK,IAAK;QACpC,IAAI;UACF,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;UACtC,IAAIH,OAAO,CAACI,IAAI,KAAK,MAAM,EAAE;YAC3B,IAAId,MAAM,CAACK,OAAO,IAAIL,MAAM,CAACK,OAAO,CAACJ,UAAU,KAAKE,SAAS,CAACI,IAAI,EAAE;cAClEP,MAAM,CAACK,OAAO,CAACU,IAAI,CAACJ,IAAI,CAACK,SAAS,CAAC;gBAAEF,IAAI,EAAE;cAAO,CAAC,CAAC,CAAC;YACvD;UACF,CAAC,MAAM;YACLhB,SAAS,CAACY,OAAO,CAAC;UACpB;QACF,CAAC,CAAC,OAAOO,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QAC1D;MACF,CAAC;MAEDjB,MAAM,CAACK,OAAO,CAACc,OAAO,GAAIV,KAAK,IAAK;QAClCS,OAAO,CAACE,GAAG,CAAC,yBAAyB,EAAEX,KAAK,CAAC;QAC7CP,aAAa,CAACC,SAAS,CAACkB,MAAM,CAAC;MACjC,CAAC;MAEDrB,MAAM,CAACK,OAAO,CAACiB,OAAO,GAAIL,KAAK,IAAK;QAClCC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;QACxCf,aAAa,CAACC,SAAS,CAACkB,MAAM,CAAC;MACjC,CAAC;IACH;IAEA,OAAO,MAAM;MACX,IAAIrB,MAAM,CAACK,OAAO,EAAE;QAClBL,MAAM,CAACK,OAAO,CAACkB,KAAK,CAAC,CAAC;QACtBvB,MAAM,CAACK,OAAO,GAAG,IAAI;MACvB;IACF,CAAC;EACH,CAAC,EAAE,CAACR,GAAG,EAAEC,SAAS,CAAC,CAAC;EAEpB,MAAM0B,WAAW,GAAId,OAAO,IAAK;IAC/B,IAAIV,MAAM,CAACK,OAAO,IAAIL,MAAM,CAACK,OAAO,CAACJ,UAAU,KAAKE,SAAS,CAACI,IAAI,EAAE;MAClEP,MAAM,CAACK,OAAO,CAACU,IAAI,CAACJ,IAAI,CAACK,SAAS,CAACN,OAAO,CAAC,CAAC;IAC9C,CAAC,MAAM;MACLQ,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAC;IAC9C;EACF,CAAC;EAED,OAAO;IAAEO,WAAW;IAAEvB;EAAW,CAAC;AACpC,CAAC;AAACF,EAAA,CAxDIH,YAAY;AA0DlB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}