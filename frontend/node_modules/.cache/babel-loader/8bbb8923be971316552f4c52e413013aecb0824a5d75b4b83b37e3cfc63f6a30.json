{"ast":null,"code":"var _jsxFileName = \"/Users/Apple/Desktop/multi-agent-dsl-final/frontend/src/contexts/EventContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useCallback, useRef, useEffect, useState } from 'react';\nimport WebSocketService from '../components/WebSocketService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventContext = /*#__PURE__*/createContext();\nconst initialState = {\n  events: [],\n  traffic: {},\n  weather: {},\n  parking: {},\n  safety: {}\n};\nconst eventReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_EVENT':\n      return {\n        ...state,\n        events: [action.payload, ...state.events]\n      };\n    case 'CLEAR_EVENTS':\n      return {\n        ...state,\n        events: []\n      };\n    case 'SET_TRAFFIC':\n      return {\n        ...state,\n        traffic: action.payload\n      };\n    case 'SET_WEATHER':\n      return {\n        ...state,\n        weather: action.payload\n      };\n    case 'SET_PARKING':\n      return {\n        ...state,\n        parking: action.payload\n      };\n    case 'SET_SAFETY':\n      return {\n        ...state,\n        safety: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const EventProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(eventReducer, initialState);\n  const idCounter = useRef(0);\n  const [readyState, setReadyState] = useState(0); // 0 = connecting, 1 = open, 2 = closing, 3 = closed\n\n  useEffect(() => {\n    const onMessage = parsedData => {\n      try {\n        if (!parsedData) {\n          console.error(\"Received empty WebSocket message data\");\n          return;\n        }\n        const newEvent = {\n          ...parsedData,\n          id: idCounter.current++,\n          at: new Date().toLocaleTimeString()\n        };\n        dispatch({\n          type: 'ADD_EVENT',\n          payload: newEvent\n        });\n      } catch (error) {\n        console.error(\"Error processing WebSocket message:\", error);\n        console.error(\"Received data:\", parsedData);\n        const errorEvent = {\n          id: idCounter.current++,\n          at: new Date().toLocaleTimeString(),\n          type: 'error',\n          title: 'WebSocket Processing Error',\n          payload: {\n            details: `Failed to process message: ${JSON.stringify(parsedData)}`\n          }\n        };\n        dispatch({\n          type: 'ADD_EVENT',\n          payload: errorEvent\n        });\n      }\n    };\n    const onConnect = () => setReadyState(1);\n    const onDisconnect = () => setReadyState(3);\n    WebSocketService.on('message', onMessage);\n    WebSocketService.on('connect', onConnect);\n    WebSocketService.on('disconnect', onDisconnect);\n  }, []);\n  const clearEvents = useCallback(() => {\n    dispatch({\n      type: 'CLEAR_EVENTS'\n    });\n  }, [dispatch]);\n  const sendAgentAction = useCallback((agent, payload, workflow = null) => {\n    let message;\n    if (workflow) {\n      message = {\n        type: 'message',\n        message_type: 'run_workflow',\n        workflow_name: workflow,\n        data: payload\n      };\n    } else {\n      message = {\n        type: 'message',\n        message_type: agent,\n        data: payload\n      };\n    }\n    console.log('Sending WebSocket message via EventContext:', message);\n    WebSocketService.send(message);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(EventContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      readyState,\n      clearEvents,\n      sendAgentAction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(EventProvider, \"OtUypKbTZqSIUmyPEKiuF123MPY=\");\n_c = EventProvider;\nexport const useEventContext = () => {\n  _s2();\n  const context = useContext(EventContext);\n  if (!context) {\n    throw new Error('useEventContext must be used within an EventProvider');\n  }\n  return context;\n};\n_s2(useEventContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default EventContext;\nvar _c;\n$RefreshReg$(_c, \"EventProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useCallback","useRef","useEffect","useState","WebSocketService","jsxDEV","_jsxDEV","EventContext","initialState","events","traffic","weather","parking","safety","eventReducer","state","action","type","payload","EventProvider","children","_s","dispatch","idCounter","readyState","setReadyState","onMessage","parsedData","console","error","newEvent","id","current","at","Date","toLocaleTimeString","errorEvent","title","details","JSON","stringify","onConnect","onDisconnect","on","clearEvents","sendAgentAction","agent","workflow","message","message_type","workflow_name","data","log","send","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useEventContext","_s2","context","Error","$RefreshReg$"],"sources":["/Users/Apple/Desktop/multi-agent-dsl-final/frontend/src/contexts/EventContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useCallback, useRef, useEffect, useState } from 'react';\nimport WebSocketService from '../components/WebSocketService';\n\nconst EventContext = createContext();\n\nconst initialState = {\n  events: [],\n  traffic: {},\n  weather: {},\n  parking: {},\n  safety: {},\n};\n\nconst eventReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_EVENT':\n      return { ...state, events: [action.payload, ...state.events] };\n    case 'CLEAR_EVENTS':\n      return { ...state, events: [] };\n    case 'SET_TRAFFIC':\n      return { ...state, traffic: action.payload };\n    case 'SET_WEATHER':\n      return { ...state, weather: action.payload };\n    case 'SET_PARKING':\n      return { ...state, parking: action.payload };\n    case 'SET_SAFETY':\n      return { ...state, safety: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport const EventProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(eventReducer, initialState);\n  const idCounter = useRef(0);\n  const [readyState, setReadyState] = useState(0); // 0 = connecting, 1 = open, 2 = closing, 3 = closed\n\n  useEffect(() => {\n    const onMessage = (parsedData) => {\n      try {\n        if (!parsedData) {\n          console.error(\"Received empty WebSocket message data\");\n          return;\n        }\n        const newEvent = {\n          ...parsedData,\n          id: idCounter.current++,\n          at: new Date().toLocaleTimeString(),\n        };\n        dispatch({ type: 'ADD_EVENT', payload: newEvent });\n      } catch (error) {\n        console.error(\"Error processing WebSocket message:\", error);\n        console.error(\"Received data:\", parsedData);\n        const errorEvent = {\n          id: idCounter.current++,\n          at: new Date().toLocaleTimeString(),\n          type: 'error',\n          title: 'WebSocket Processing Error',\n          payload: { details: `Failed to process message: ${JSON.stringify(parsedData)}` },\n        };\n        dispatch({ type: 'ADD_EVENT', payload: errorEvent });\n      }\n    };\n\n    const onConnect = () => setReadyState(1);\n    const onDisconnect = () => setReadyState(3);\n\n    WebSocketService.on('message', onMessage);\n    WebSocketService.on('connect', onConnect);\n    WebSocketService.on('disconnect', onDisconnect);\n  }, []);\n\n  const clearEvents = useCallback(() => {\n    dispatch({ type: 'CLEAR_EVENTS' });\n  }, [dispatch]);\n\n  const sendAgentAction = useCallback((agent, payload, workflow = null) => {\n    let message;\n    if (workflow) {\n      message = {\n        type: 'message',\n        message_type: 'run_workflow',\n        workflow_name: workflow,\n        data: payload,\n      };\n    } else {\n      message = {\n        type: 'message',\n        message_type: agent,\n        data: payload,\n      };\n    }\n    console.log('Sending WebSocket message via EventContext:', message);\n    WebSocketService.send(message);\n  }, []);\n\n  return (\n    <EventContext.Provider value={{ state, dispatch, readyState, clearEvents, sendAgentAction }}>\n      {children}\n    </EventContext.Provider>\n  );\n};\n\nexport const useEventContext = () => {\n  const context = useContext(EventContext);\n  if (!context) {\n    throw new Error('useEventContext must be used within an EventProvider');\n  }\n  return context;\n};\n\nexport default EventContext;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,WAAW,EAAEC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9G,OAAOC,gBAAgB,MAAM,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,MAAMC,YAAY,gBAAGV,aAAa,CAAC,CAAC;AAEpC,MAAMW,YAAY,GAAG;EACnBC,MAAM,EAAE,EAAE;EACVC,OAAO,EAAE,CAAC,CAAC;EACXC,OAAO,EAAE,CAAC,CAAC;EACXC,OAAO,EAAE,CAAC,CAAC;EACXC,MAAM,EAAE,CAAC;AACX,CAAC;AAED,MAAMC,YAAY,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACtC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,WAAW;MACd,OAAO;QAAE,GAAGF,KAAK;QAAEN,MAAM,EAAE,CAACO,MAAM,CAACE,OAAO,EAAE,GAAGH,KAAK,CAACN,MAAM;MAAE,CAAC;IAChE,KAAK,cAAc;MACjB,OAAO;QAAE,GAAGM,KAAK;QAAEN,MAAM,EAAE;MAAG,CAAC;IACjC,KAAK,aAAa;MAChB,OAAO;QAAE,GAAGM,KAAK;QAAEL,OAAO,EAAEM,MAAM,CAACE;MAAQ,CAAC;IAC9C,KAAK,aAAa;MAChB,OAAO;QAAE,GAAGH,KAAK;QAAEJ,OAAO,EAAEK,MAAM,CAACE;MAAQ,CAAC;IAC9C,KAAK,aAAa;MAChB,OAAO;QAAE,GAAGH,KAAK;QAAEH,OAAO,EAAEI,MAAM,CAACE;MAAQ,CAAC;IAC9C,KAAK,YAAY;MACf,OAAO;QAAE,GAAGH,KAAK;QAAEF,MAAM,EAAEG,MAAM,CAACE;MAAQ,CAAC;IAC7C;MACE,OAAOH,KAAK;EAChB;AACF,CAAC;AAED,OAAO,MAAMI,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACN,KAAK,EAAEO,QAAQ,CAAC,GAAGvB,UAAU,CAACe,YAAY,EAAEN,YAAY,CAAC;EAChE,MAAMe,SAAS,GAAGtB,MAAM,CAAC,CAAC,CAAC;EAC3B,MAAM,CAACuB,UAAU,EAAEC,aAAa,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEjDD,SAAS,CAAC,MAAM;IACd,MAAMwB,SAAS,GAAIC,UAAU,IAAK;MAChC,IAAI;QACF,IAAI,CAACA,UAAU,EAAE;UACfC,OAAO,CAACC,KAAK,CAAC,uCAAuC,CAAC;UACtD;QACF;QACA,MAAMC,QAAQ,GAAG;UACf,GAAGH,UAAU;UACbI,EAAE,EAAER,SAAS,CAACS,OAAO,EAAE;UACvBC,EAAE,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC;QACpC,CAAC;QACDb,QAAQ,CAAC;UAAEL,IAAI,EAAE,WAAW;UAAEC,OAAO,EAAEY;QAAS,CAAC,CAAC;MACpD,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;QAC3DD,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEF,UAAU,CAAC;QAC3C,MAAMS,UAAU,GAAG;UACjBL,EAAE,EAAER,SAAS,CAACS,OAAO,EAAE;UACvBC,EAAE,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;UACnClB,IAAI,EAAE,OAAO;UACboB,KAAK,EAAE,4BAA4B;UACnCnB,OAAO,EAAE;YAAEoB,OAAO,EAAE,8BAA8BC,IAAI,CAACC,SAAS,CAACb,UAAU,CAAC;UAAG;QACjF,CAAC;QACDL,QAAQ,CAAC;UAAEL,IAAI,EAAE,WAAW;UAAEC,OAAO,EAAEkB;QAAW,CAAC,CAAC;MACtD;IACF,CAAC;IAED,MAAMK,SAAS,GAAGA,CAAA,KAAMhB,aAAa,CAAC,CAAC,CAAC;IACxC,MAAMiB,YAAY,GAAGA,CAAA,KAAMjB,aAAa,CAAC,CAAC,CAAC;IAE3CrB,gBAAgB,CAACuC,EAAE,CAAC,SAAS,EAAEjB,SAAS,CAAC;IACzCtB,gBAAgB,CAACuC,EAAE,CAAC,SAAS,EAAEF,SAAS,CAAC;IACzCrC,gBAAgB,CAACuC,EAAE,CAAC,YAAY,EAAED,YAAY,CAAC;EACjD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,WAAW,GAAG5C,WAAW,CAAC,MAAM;IACpCsB,QAAQ,CAAC;MAAEL,IAAI,EAAE;IAAe,CAAC,CAAC;EACpC,CAAC,EAAE,CAACK,QAAQ,CAAC,CAAC;EAEd,MAAMuB,eAAe,GAAG7C,WAAW,CAAC,CAAC8C,KAAK,EAAE5B,OAAO,EAAE6B,QAAQ,GAAG,IAAI,KAAK;IACvE,IAAIC,OAAO;IACX,IAAID,QAAQ,EAAE;MACZC,OAAO,GAAG;QACR/B,IAAI,EAAE,SAAS;QACfgC,YAAY,EAAE,cAAc;QAC5BC,aAAa,EAAEH,QAAQ;QACvBI,IAAI,EAAEjC;MACR,CAAC;IACH,CAAC,MAAM;MACL8B,OAAO,GAAG;QACR/B,IAAI,EAAE,SAAS;QACfgC,YAAY,EAAEH,KAAK;QACnBK,IAAI,EAAEjC;MACR,CAAC;IACH;IACAU,OAAO,CAACwB,GAAG,CAAC,6CAA6C,EAAEJ,OAAO,CAAC;IACnE5C,gBAAgB,CAACiD,IAAI,CAACL,OAAO,CAAC;EAChC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE1C,OAAA,CAACC,YAAY,CAAC+C,QAAQ;IAACC,KAAK,EAAE;MAAExC,KAAK;MAAEO,QAAQ;MAAEE,UAAU;MAAEoB,WAAW;MAAEC;IAAgB,CAAE;IAAAzB,QAAA,EACzFA;EAAQ;IAAAoC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACtC,EAAA,CArEWF,aAAa;AAAAyC,EAAA,GAAbzC,aAAa;AAuE1B,OAAO,MAAM0C,eAAe,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACnC,MAAMC,OAAO,GAAGjE,UAAU,CAACS,YAAY,CAAC;EACxC,IAAI,CAACwD,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;EACzE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,eAAe;AAQ5B,eAAetD,YAAY;AAAC,IAAAqD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}