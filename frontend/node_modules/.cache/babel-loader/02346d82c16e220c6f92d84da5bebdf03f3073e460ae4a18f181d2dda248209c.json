{"ast":null,"code":"// frontend/src/components/WebSocketService.js\nimport { io } from 'socket.io-client';\nimport WebSocketConnectionPool from './WebSocketConnectionPool';\nclass WebSocketService {\n  constructor() {\n    this.connectionPool = WebSocketConnectionPool;\n    this.currentConnection = null;\n    this.onConnectCallback = null;\n    this.onDisconnectCallback = null;\n    this.onMessageCallback = null;\n    this.onErrorCallback = null;\n    this.isConnected = false;\n    this.setupConnectionPoolHandlers();\n  }\n  setupConnectionPoolHandlers() {\n    this.connectionPool.setEventHandlers({\n      onConnectionSuccess: (connectionId, socket) => {\n        this.currentConnection = socket;\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      },\n      onConnectionLost: (connectionId, socket, reason) => {\n        this.isConnected = false;\n        if (this.onDisconnectCallback) {\n          this.onDisconnectCallback(reason);\n        }\n      },\n      onConnectionError: (connectionId, socket, error) => {\n        this.isConnected = false;\n        if (this.onErrorCallback) {\n          this.onErrorCallback(error);\n        }\n      },\n      onReconnectionSuccess: (connectionId, socket, attemptNumber) => {\n        this.currentConnection = socket;\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      },\n      onReconnectionError: (connectionId, socket, error) => {\n        this.isConnected = false;\n        if (this.onErrorCallback) {\n          this.onErrorCallback(error);\n        }\n      },\n      onConnectionConfirmed: (connectionId, socket, data) => {\n        this.currentConnection = socket;\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      },\n      onMessage: (connectionId, socket, eventName, args) => {\n        if (this.onMessageCallback) {\n          const message = args[0] || {};\n          this.onMessageCallback(message);\n        }\n      }\n    });\n  }\n  connect(url) {\n    console.log('🔌 连接到:', url);\n\n    // 先断开现有连接\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    try {\n      // 使用真正的Socket.IO连接\n      this.socket = io(url, {\n        transports: ['websocket', 'polling'],\n        timeout: 20000,\n        forceNew: true,\n        reconnection: true,\n        reconnectionAttempts: 5,\n        reconnectionDelay: 1000\n      });\n      this.socket.on('connect', () => {\n        console.log('✅ WebSocket连接成功');\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n      this.socket.on('disconnect', reason => {\n        console.log('❌ WebSocket断开连接:', reason);\n        this.isConnected = false;\n        if (this.onDisconnectCallback) {\n          this.onDisconnectCallback();\n        }\n      });\n      this.socket.on('connect_error', error => {\n        console.error('❌ WebSocket连接错误:', error);\n        this.isConnected = false;\n        if (this.onErrorCallback) {\n          this.onErrorCallback(error);\n        }\n      });\n      this.socket.on('reconnect', attemptNumber => {\n        console.log('🔄 WebSocket重连成功，尝试次数:', attemptNumber);\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n      this.socket.on('reconnect_error', error => {\n        console.error('❌ WebSocket重连失败:', error);\n        this.isConnected = false;\n      });\n\n      // 监听所有消息\n      this.socket.onAny((eventName, ...args) => {\n        console.log('📨 收到消息:', eventName, args);\n        if (this.onMessageCallback) {\n          const message = args[0] || {};\n          this.onMessageCallback(message);\n        }\n      });\n\n      // 特别监听广播消息\n      this.socket.on('broadcast', data => {\n        console.log('📡 收到广播消息:', data);\n        if (this.onMessageCallback) {\n          this.onMessageCallback(data);\n        }\n      });\n\n      // 监听连接成功事件\n      this.socket.on('connection_successful', data => {\n        console.log('🎉 收到连接成功确认:', data);\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n    } catch (error) {\n      console.error('❌ WebSocket初始化失败:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    }\n  }\n  send(event, data) {\n    if (!this.isConnected || !this.socket) {\n      console.error('❌ WebSocket未连接');\n      return;\n    }\n    console.log('📤 发送消息:', {\n      event,\n      data\n    });\n    try {\n      this.socket.emit(event, data);\n    } catch (error) {\n      console.error('❌ 发送消息失败:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    }\n  }\n  on(event, callback) {\n    switch (event) {\n      case 'connect':\n        this.onConnectCallback = callback;\n        break;\n      case 'disconnect':\n        this.onDisconnectCallback = callback;\n        break;\n      case 'message':\n        this.onMessageCallback = callback;\n        break;\n      case 'error':\n        this.onErrorCallback = callback;\n        break;\n      default:\n        console.error(`Unknown event: ${event}`);\n    }\n  }\n  disconnect() {\n    this.isConnected = false;\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    if (this.onDisconnectCallback) {\n      this.onDisconnectCallback();\n    }\n  }\n  reconnect() {\n    console.log('🔄 手动重连WebSocket...');\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n    // 重新连接\n    setTimeout(() => {\n      this.connect('http://localhost:8008');\n    }, 1000);\n  }\n}\nconst instance = new WebSocketService();\nexport default instance;","map":{"version":3,"names":["io","WebSocketConnectionPool","WebSocketService","constructor","connectionPool","currentConnection","onConnectCallback","onDisconnectCallback","onMessageCallback","onErrorCallback","isConnected","setupConnectionPoolHandlers","setEventHandlers","onConnectionSuccess","connectionId","socket","onConnectionLost","reason","onConnectionError","error","onReconnectionSuccess","attemptNumber","onReconnectionError","onConnectionConfirmed","data","onMessage","eventName","args","message","connect","url","console","log","disconnect","transports","timeout","forceNew","reconnection","reconnectionAttempts","reconnectionDelay","on","onAny","send","event","emit","callback","reconnect","setTimeout","instance"],"sources":["/Users/Apple/Desktop/multi-agent-dsl-final/frontend/src/components/WebSocketService.js"],"sourcesContent":["// frontend/src/components/WebSocketService.js\nimport { io } from 'socket.io-client';\nimport WebSocketConnectionPool from './WebSocketConnectionPool';\n\nclass WebSocketService {\n  constructor() {\n    this.connectionPool = WebSocketConnectionPool;\n    this.currentConnection = null;\n    this.onConnectCallback = null;\n    this.onDisconnectCallback = null;\n    this.onMessageCallback = null;\n    this.onErrorCallback = null;\n    this.isConnected = false;\n    this.setupConnectionPoolHandlers();\n  }\n\n  setupConnectionPoolHandlers() {\n    this.connectionPool.setEventHandlers({\n      onConnectionSuccess: (connectionId, socket) => {\n        this.currentConnection = socket;\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      },\n      onConnectionLost: (connectionId, socket, reason) => {\n        this.isConnected = false;\n        if (this.onDisconnectCallback) {\n          this.onDisconnectCallback(reason);\n        }\n      },\n      onConnectionError: (connectionId, socket, error) => {\n        this.isConnected = false;\n        if (this.onErrorCallback) {\n          this.onErrorCallback(error);\n        }\n      },\n      onReconnectionSuccess: (connectionId, socket, attemptNumber) => {\n        this.currentConnection = socket;\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      },\n      onReconnectionError: (connectionId, socket, error) => {\n        this.isConnected = false;\n        if (this.onErrorCallback) {\n          this.onErrorCallback(error);\n        }\n      },\n      onConnectionConfirmed: (connectionId, socket, data) => {\n        this.currentConnection = socket;\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      },\n      onMessage: (connectionId, socket, eventName, args) => {\n        if (this.onMessageCallback) {\n          const message = args[0] || {};\n          this.onMessageCallback(message);\n        }\n      }\n    });\n  }\n\n  connect(url) {\n    console.log('🔌 连接到:', url);\n    \n    // 先断开现有连接\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    \n    try {\n      // 使用真正的Socket.IO连接\n      this.socket = io(url, {\n        transports: ['websocket', 'polling'],\n        timeout: 20000,\n        forceNew: true,\n        reconnection: true,\n        reconnectionAttempts: 5,\n        reconnectionDelay: 1000\n      });\n\n      this.socket.on('connect', () => {\n        console.log('✅ WebSocket连接成功');\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n\n      this.socket.on('disconnect', (reason) => {\n        console.log('❌ WebSocket断开连接:', reason);\n        this.isConnected = false;\n        if (this.onDisconnectCallback) {\n          this.onDisconnectCallback();\n        }\n      });\n\n      this.socket.on('connect_error', (error) => {\n        console.error('❌ WebSocket连接错误:', error);\n        this.isConnected = false;\n        if (this.onErrorCallback) {\n          this.onErrorCallback(error);\n        }\n      });\n\n      this.socket.on('reconnect', (attemptNumber) => {\n        console.log('🔄 WebSocket重连成功，尝试次数:', attemptNumber);\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n\n      this.socket.on('reconnect_error', (error) => {\n        console.error('❌ WebSocket重连失败:', error);\n        this.isConnected = false;\n      });\n\n      // 监听所有消息\n      this.socket.onAny((eventName, ...args) => {\n        console.log('📨 收到消息:', eventName, args);\n        if (this.onMessageCallback) {\n          const message = args[0] || {};\n          this.onMessageCallback(message);\n        }\n      });\n\n      // 特别监听广播消息\n      this.socket.on('broadcast', (data) => {\n        console.log('📡 收到广播消息:', data);\n        if (this.onMessageCallback) {\n          this.onMessageCallback(data);\n        }\n      });\n\n      // 监听连接成功事件\n      this.socket.on('connection_successful', (data) => {\n        console.log('🎉 收到连接成功确认:', data);\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n\n    } catch (error) {\n      console.error('❌ WebSocket初始化失败:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    }\n  }\n\n  send(event, data) {\n    if (!this.isConnected || !this.socket) {\n      console.error('❌ WebSocket未连接');\n      return;\n    }\n\n    console.log('📤 发送消息:', { event, data });\n    \n    try {\n      this.socket.emit(event, data);\n    } catch (error) {\n      console.error('❌ 发送消息失败:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    }\n  }\n\n  on(event, callback) {\n    switch (event) {\n      case 'connect':\n        this.onConnectCallback = callback;\n        break;\n      case 'disconnect':\n        this.onDisconnectCallback = callback;\n        break;\n      case 'message':\n        this.onMessageCallback = callback;\n        break;\n      case 'error':\n        this.onErrorCallback = callback;\n        break;\n      default:\n        console.error(`Unknown event: ${event}`);\n    }\n  }\n\n  disconnect() {\n    this.isConnected = false;\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    if (this.onDisconnectCallback) {\n      this.onDisconnectCallback();\n    }\n  }\n\n  reconnect() {\n    console.log('🔄 手动重连WebSocket...');\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n    // 重新连接\n    setTimeout(() => {\n      this.connect('http://localhost:8008');\n    }, 1000);\n  }\n}\n\nconst instance = new WebSocketService();\nexport default instance;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}