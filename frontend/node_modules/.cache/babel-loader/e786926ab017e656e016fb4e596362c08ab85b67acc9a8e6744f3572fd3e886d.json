{"ast":null,"code":"// frontend/src/components/WebSocketService.js\nimport { io } from 'socket.io-client';\nclass WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.onConnectCallback = null;\n    this.onDisconnectCallback = null;\n    this.onMessageCallback = null;\n    this.onErrorCallback = null;\n    this.isConnected = false;\n  }\n  connect(url) {\n    console.log('🔌 连接到:', url);\n\n    // 先断开现有连接\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    try {\n      // 使用真正的Socket.IO连接\n      this.socket = io(url, {\n        transports: ['websocket', 'polling'],\n        timeout: 20000,\n        forceNew: true,\n        reconnection: true,\n        reconnectionAttempts: 5,\n        reconnectionDelay: 1000\n      });\n      this.socket.on('connect', () => {\n        console.log('✅ WebSocket连接成功');\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n      this.socket.on('disconnect', reason => {\n        console.log('❌ WebSocket断开连接:', reason);\n        this.isConnected = false;\n        if (this.onDisconnectCallback) {\n          this.onDisconnectCallback();\n        }\n      });\n      this.socket.on('connect_error', error => {\n        console.error('❌ WebSocket连接错误:', error);\n        this.isConnected = false;\n        if (this.onErrorCallback) {\n          this.onErrorCallback(error);\n        }\n      });\n      this.socket.on('reconnect', attemptNumber => {\n        console.log('🔄 WebSocket重连成功，尝试次数:', attemptNumber);\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n      this.socket.on('reconnect_error', error => {\n        console.error('❌ WebSocket重连失败:', error);\n        this.isConnected = false;\n      });\n\n      // 监听所有消息\n      this.socket.onAny((eventName, ...args) => {\n        console.log('📨 收到消息:', eventName, args);\n        if (this.onMessageCallback) {\n          const message = args[0] || {};\n          this.onMessageCallback(message);\n        }\n      });\n\n      // 特别监听广播消息\n      this.socket.on('broadcast', data => {\n        console.log('📡 收到广播消息:', data);\n        if (this.onMessageCallback) {\n          this.onMessageCallback(data);\n        }\n      });\n    } catch (error) {\n      console.error('❌ WebSocket初始化失败:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    }\n  }\n  send(event, data) {\n    if (!this.isConnected || !this.socket) {\n      console.error('❌ WebSocket未连接');\n      return;\n    }\n    console.log('📤 发送消息:', {\n      event,\n      data\n    });\n    try {\n      this.socket.emit(event, data);\n    } catch (error) {\n      console.error('❌ 发送消息失败:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    }\n  }\n  on(event, callback) {\n    switch (event) {\n      case 'connect':\n        this.onConnectCallback = callback;\n        break;\n      case 'disconnect':\n        this.onDisconnectCallback = callback;\n        break;\n      case 'message':\n        this.onMessageCallback = callback;\n        break;\n      case 'error':\n        this.onErrorCallback = callback;\n        break;\n      default:\n        console.error(`Unknown event: ${event}`);\n    }\n  }\n  disconnect() {\n    this.isConnected = false;\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    if (this.onDisconnectCallback) {\n      this.onDisconnectCallback();\n    }\n  }\n  reconnect() {\n    console.log('🔄 手动重连WebSocket...');\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n    // 重新连接\n    setTimeout(() => {\n      this.connect('http://localhost:8008');\n    }, 1000);\n  }\n}\nconst instance = new WebSocketService();\nexport default instance;","map":{"version":3,"names":["io","WebSocketService","constructor","socket","onConnectCallback","onDisconnectCallback","onMessageCallback","onErrorCallback","isConnected","connect","url","console","log","disconnect","transports","timeout","forceNew","reconnection","reconnectionAttempts","reconnectionDelay","on","reason","error","attemptNumber","onAny","eventName","args","message","data","send","event","emit","callback","reconnect","setTimeout","instance"],"sources":["/Users/Apple/Desktop/multi-agent-dsl-final/frontend/src/components/WebSocketService.js"],"sourcesContent":["// frontend/src/components/WebSocketService.js\nimport { io } from 'socket.io-client';\n\nclass WebSocketService {\n  socket = null;\n  onConnectCallback = null;\n  onDisconnectCallback = null;\n  onMessageCallback = null;\n  onErrorCallback = null;\n  isConnected = false;\n\n  connect(url) {\n    console.log('🔌 连接到:', url);\n    \n    // 先断开现有连接\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    \n    try {\n      // 使用真正的Socket.IO连接\n      this.socket = io(url, {\n        transports: ['websocket', 'polling'],\n        timeout: 20000,\n        forceNew: true,\n        reconnection: true,\n        reconnectionAttempts: 5,\n        reconnectionDelay: 1000\n      });\n\n      this.socket.on('connect', () => {\n        console.log('✅ WebSocket连接成功');\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n\n      this.socket.on('disconnect', (reason) => {\n        console.log('❌ WebSocket断开连接:', reason);\n        this.isConnected = false;\n        if (this.onDisconnectCallback) {\n          this.onDisconnectCallback();\n        }\n      });\n\n      this.socket.on('connect_error', (error) => {\n        console.error('❌ WebSocket连接错误:', error);\n        this.isConnected = false;\n        if (this.onErrorCallback) {\n          this.onErrorCallback(error);\n        }\n      });\n\n      this.socket.on('reconnect', (attemptNumber) => {\n        console.log('🔄 WebSocket重连成功，尝试次数:', attemptNumber);\n        this.isConnected = true;\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n\n      this.socket.on('reconnect_error', (error) => {\n        console.error('❌ WebSocket重连失败:', error);\n        this.isConnected = false;\n      });\n\n      // 监听所有消息\n      this.socket.onAny((eventName, ...args) => {\n        console.log('📨 收到消息:', eventName, args);\n        if (this.onMessageCallback) {\n          const message = args[0] || {};\n          this.onMessageCallback(message);\n        }\n      });\n\n      // 特别监听广播消息\n      this.socket.on('broadcast', (data) => {\n        console.log('📡 收到广播消息:', data);\n        if (this.onMessageCallback) {\n          this.onMessageCallback(data);\n        }\n      });\n\n    } catch (error) {\n      console.error('❌ WebSocket初始化失败:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    }\n  }\n\n  send(event, data) {\n    if (!this.isConnected || !this.socket) {\n      console.error('❌ WebSocket未连接');\n      return;\n    }\n\n    console.log('📤 发送消息:', { event, data });\n    \n    try {\n      this.socket.emit(event, data);\n    } catch (error) {\n      console.error('❌ 发送消息失败:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(error);\n      }\n    }\n  }\n\n  on(event, callback) {\n    switch (event) {\n      case 'connect':\n        this.onConnectCallback = callback;\n        break;\n      case 'disconnect':\n        this.onDisconnectCallback = callback;\n        break;\n      case 'message':\n        this.onMessageCallback = callback;\n        break;\n      case 'error':\n        this.onErrorCallback = callback;\n        break;\n      default:\n        console.error(`Unknown event: ${event}`);\n    }\n  }\n\n  disconnect() {\n    this.isConnected = false;\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    if (this.onDisconnectCallback) {\n      this.onDisconnectCallback();\n    }\n  }\n\n  reconnect() {\n    console.log('🔄 手动重连WebSocket...');\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n    // 重新连接\n    setTimeout(() => {\n      this.connect('http://localhost:8008');\n    }, 1000);\n  }\n}\n\nconst instance = new WebSocketService();\nexport default instance;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}