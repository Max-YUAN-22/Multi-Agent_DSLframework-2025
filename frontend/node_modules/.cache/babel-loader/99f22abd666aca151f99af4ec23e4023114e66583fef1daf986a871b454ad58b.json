{"ast":null,"code":"// frontend/src/components/WebSocketConnectionPool.js\nimport { io } from 'socket.io-client';\nclass WebSocketConnectionPool {\n  constructor() {\n    this.connections = new Map();\n    this.defaultConfig = {\n      transports: ['websocket', 'polling'],\n      timeout: 20000,\n      forceNew: true,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      autoConnect: true\n    };\n    this.maxConnections = 3; // 每个用户最多3个连接\n    this.userId = this.generateUserId();\n  }\n  generateUserId() {\n    // 生成唯一用户ID，可以基于浏览器指纹或其他方式\n    if (typeof window === 'undefined') {\n      // 服务器端渲染时返回默认ID\n      return `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    let userId = localStorage.getItem('websocket_user_id');\n    if (!userId) {\n      userId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      localStorage.setItem('websocket_user_id', userId);\n    }\n    return userId;\n  }\n  createConnection(url, options = {}) {\n    const connectionId = `conn_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`;\n    const config = {\n      ...this.defaultConfig,\n      ...options\n    };\n\n    // 添加用户ID到连接参数\n    const connectionUrl = `${url}?user_id=${this.userId}&connection_id=${connectionId}`;\n    console.log(`🔌 创建新连接: ${connectionId} for user: ${this.userId}`);\n    const socket = io(connectionUrl, config);\n\n    // 设置连接元数据\n    socket.connectionId = connectionId;\n    socket.userId = this.userId;\n    socket.createdAt = new Date();\n    socket.isActive = true;\n\n    // 添加事件监听器\n    this.setupConnectionListeners(socket, connectionId);\n\n    // 存储连接\n    this.connections.set(connectionId, socket);\n\n    // 检查连接数限制\n    this.enforceConnectionLimit();\n    return {\n      connectionId,\n      socket\n    };\n  }\n  setupConnectionListeners(socket, connectionId) {\n    socket.on('connect', () => {\n      var _this$onConnectionSuc;\n      console.log(`✅ 连接成功: ${connectionId}`);\n      socket.isActive = true;\n      (_this$onConnectionSuc = this.onConnectionSuccess) === null || _this$onConnectionSuc === void 0 ? void 0 : _this$onConnectionSuc.call(this, connectionId, socket);\n    });\n    socket.on('disconnect', reason => {\n      var _this$onConnectionLos;\n      console.log(`❌ 连接断开: ${connectionId}, 原因: ${reason}`);\n      socket.isActive = false;\n      (_this$onConnectionLos = this.onConnectionLost) === null || _this$onConnectionLos === void 0 ? void 0 : _this$onConnectionLos.call(this, connectionId, socket, reason);\n    });\n    socket.on('connect_error', error => {\n      var _this$onConnectionErr;\n      console.error(`❌ 连接错误: ${connectionId}`, error);\n      socket.isActive = false;\n      (_this$onConnectionErr = this.onConnectionError) === null || _this$onConnectionErr === void 0 ? void 0 : _this$onConnectionErr.call(this, connectionId, socket, error);\n    });\n    socket.on('reconnect', attemptNumber => {\n      var _this$onReconnectionS;\n      console.log(`🔄 重连成功: ${connectionId}, 尝试次数: ${attemptNumber}`);\n      socket.isActive = true;\n      (_this$onReconnectionS = this.onReconnectionSuccess) === null || _this$onReconnectionS === void 0 ? void 0 : _this$onReconnectionS.call(this, connectionId, socket, attemptNumber);\n    });\n    socket.on('reconnect_error', error => {\n      var _this$onReconnectionE;\n      console.error(`❌ 重连失败: ${connectionId}`, error);\n      (_this$onReconnectionE = this.onReconnectionError) === null || _this$onReconnectionE === void 0 ? void 0 : _this$onReconnectionE.call(this, connectionId, socket, error);\n    });\n    socket.on('connection_successful', data => {\n      var _this$onConnectionCon;\n      console.log(`🎉 收到连接确认: ${connectionId}`, data);\n      (_this$onConnectionCon = this.onConnectionConfirmed) === null || _this$onConnectionCon === void 0 ? void 0 : _this$onConnectionCon.call(this, connectionId, socket, data);\n    });\n    socket.on('server_stats', stats => {\n      var _this$onServerStats;\n      console.log(`📊 服务器统计: ${connectionId}`, stats);\n      (_this$onServerStats = this.onServerStats) === null || _this$onServerStats === void 0 ? void 0 : _this$onServerStats.call(this, connectionId, socket, stats);\n    });\n\n    // 监听所有消息\n    socket.onAny((eventName, ...args) => {\n      var _this$onMessage;\n      console.log(`📨 收到消息 [${connectionId}]:`, eventName, args);\n      (_this$onMessage = this.onMessage) === null || _this$onMessage === void 0 ? void 0 : _this$onMessage.call(this, connectionId, socket, eventName, args);\n    });\n  }\n  enforceConnectionLimit() {\n    const activeConnections = Array.from(this.connections.values()).filter(conn => conn.isActive);\n    if (activeConnections.length > this.maxConnections) {\n      // 关闭最旧的连接\n      const oldestConnection = activeConnections.sort((a, b) => a.createdAt - b.createdAt)[0];\n      console.log(`⚠️ 超过连接限制，关闭最旧连接: ${oldestConnection.connectionId}`);\n      this.closeConnection(oldestConnection.connectionId);\n    }\n  }\n  getActiveConnection() {\n    const activeConnections = Array.from(this.connections.values()).filter(conn => conn.isActive && conn.connected);\n    if (activeConnections.length > 0) {\n      // 返回最新的活跃连接\n      return activeConnections.sort((a, b) => b.createdAt - a.createdAt)[0];\n    }\n    return null;\n  }\n  getAllActiveConnections() {\n    return Array.from(this.connections.values()).filter(conn => conn.isActive && conn.connected);\n  }\n  closeConnection(connectionId) {\n    const socket = this.connections.get(connectionId);\n    if (socket) {\n      console.log(`🔌 关闭连接: ${connectionId}`);\n      socket.disconnect();\n      this.connections.delete(connectionId);\n    }\n  }\n  closeAllConnections() {\n    console.log('🔌 关闭所有连接');\n    this.connections.forEach((socket, connectionId) => {\n      socket.disconnect();\n    });\n    this.connections.clear();\n  }\n  reconnectAll() {\n    console.log('🔄 重连所有连接');\n    this.connections.forEach((socket, connectionId) => {\n      if (!socket.connected) {\n        socket.connect();\n      }\n    });\n  }\n  getConnectionStats() {\n    const activeConnections = Array.from(this.connections.values()).filter(conn => conn.isActive && conn.connected);\n    return {\n      totalConnections: this.connections.size,\n      activeConnections: activeConnections.length,\n      userId: this.userId,\n      connections: activeConnections.map(conn => ({\n        connectionId: conn.connectionId,\n        connected: conn.connected,\n        createdAt: conn.createdAt\n      }))\n    };\n  }\n\n  // 事件回调设置方法\n  setEventHandlers(handlers) {\n    this.onConnectionSuccess = handlers.onConnectionSuccess;\n    this.onConnectionLost = handlers.onConnectionLost;\n    this.onConnectionError = handlers.onConnectionError;\n    this.onReconnectionSuccess = handlers.onReconnectionSuccess;\n    this.onReconnectionError = handlers.onReconnectionError;\n    this.onConnectionConfirmed = handlers.onConnectionConfirmed;\n    this.onServerStats = handlers.onServerStats;\n    this.onMessage = handlers.onMessage;\n  }\n}\n\n// 全局连接池实例\nconst connectionPool = new WebSocketConnectionPool();\nexport default connectionPool;","map":{"version":3,"names":["io","WebSocketConnectionPool","constructor","connections","Map","defaultConfig","transports","timeout","forceNew","reconnection","reconnectionAttempts","reconnectionDelay","autoConnect","maxConnections","userId","generateUserId","window","Date","now","Math","random","toString","substr","localStorage","getItem","setItem","createConnection","url","options","connectionId","config","connectionUrl","console","log","socket","createdAt","isActive","setupConnectionListeners","set","enforceConnectionLimit","on","_this$onConnectionSuc","onConnectionSuccess","call","reason","_this$onConnectionLos","onConnectionLost","error","_this$onConnectionErr","onConnectionError","attemptNumber","_this$onReconnectionS","onReconnectionSuccess","_this$onReconnectionE","onReconnectionError","data","_this$onConnectionCon","onConnectionConfirmed","stats","_this$onServerStats","onServerStats","onAny","eventName","args","_this$onMessage","onMessage","activeConnections","Array","from","values","filter","conn","length","oldestConnection","sort","a","b","closeConnection","getActiveConnection","connected","getAllActiveConnections","get","disconnect","delete","closeAllConnections","forEach","clear","reconnectAll","connect","getConnectionStats","totalConnections","size","map","setEventHandlers","handlers","connectionPool"],"sources":["/Users/Apple/Desktop/multi-agent-dsl-final/frontend/src/components/WebSocketConnectionPool.js"],"sourcesContent":["// frontend/src/components/WebSocketConnectionPool.js\nimport { io } from 'socket.io-client';\n\nclass WebSocketConnectionPool {\n  constructor() {\n    this.connections = new Map();\n    this.defaultConfig = {\n      transports: ['websocket', 'polling'],\n      timeout: 20000,\n      forceNew: true,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      autoConnect: true\n    };\n    this.maxConnections = 3; // 每个用户最多3个连接\n    this.userId = this.generateUserId();\n  }\n\n  generateUserId() {\n    // 生成唯一用户ID，可以基于浏览器指纹或其他方式\n    if (typeof window === 'undefined') {\n      // 服务器端渲染时返回默认ID\n      return `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    let userId = localStorage.getItem('websocket_user_id');\n    if (!userId) {\n      userId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      localStorage.setItem('websocket_user_id', userId);\n    }\n    return userId;\n  }\n\n  createConnection(url, options = {}) {\n    const connectionId = `conn_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`;\n    const config = { ...this.defaultConfig, ...options };\n    \n    // 添加用户ID到连接参数\n    const connectionUrl = `${url}?user_id=${this.userId}&connection_id=${connectionId}`;\n    \n    console.log(`🔌 创建新连接: ${connectionId} for user: ${this.userId}`);\n    \n    const socket = io(connectionUrl, config);\n    \n    // 设置连接元数据\n    socket.connectionId = connectionId;\n    socket.userId = this.userId;\n    socket.createdAt = new Date();\n    socket.isActive = true;\n    \n    // 添加事件监听器\n    this.setupConnectionListeners(socket, connectionId);\n    \n    // 存储连接\n    this.connections.set(connectionId, socket);\n    \n    // 检查连接数限制\n    this.enforceConnectionLimit();\n    \n    return { connectionId, socket };\n  }\n\n  setupConnectionListeners(socket, connectionId) {\n    socket.on('connect', () => {\n      console.log(`✅ 连接成功: ${connectionId}`);\n      socket.isActive = true;\n      this.onConnectionSuccess?.(connectionId, socket);\n    });\n\n    socket.on('disconnect', (reason) => {\n      console.log(`❌ 连接断开: ${connectionId}, 原因: ${reason}`);\n      socket.isActive = false;\n      this.onConnectionLost?.(connectionId, socket, reason);\n    });\n\n    socket.on('connect_error', (error) => {\n      console.error(`❌ 连接错误: ${connectionId}`, error);\n      socket.isActive = false;\n      this.onConnectionError?.(connectionId, socket, error);\n    });\n\n    socket.on('reconnect', (attemptNumber) => {\n      console.log(`🔄 重连成功: ${connectionId}, 尝试次数: ${attemptNumber}`);\n      socket.isActive = true;\n      this.onReconnectionSuccess?.(connectionId, socket, attemptNumber);\n    });\n\n    socket.on('reconnect_error', (error) => {\n      console.error(`❌ 重连失败: ${connectionId}`, error);\n      this.onReconnectionError?.(connectionId, socket, error);\n    });\n\n    socket.on('connection_successful', (data) => {\n      console.log(`🎉 收到连接确认: ${connectionId}`, data);\n      this.onConnectionConfirmed?.(connectionId, socket, data);\n    });\n\n    socket.on('server_stats', (stats) => {\n      console.log(`📊 服务器统计: ${connectionId}`, stats);\n      this.onServerStats?.(connectionId, socket, stats);\n    });\n\n    // 监听所有消息\n    socket.onAny((eventName, ...args) => {\n      console.log(`📨 收到消息 [${connectionId}]:`, eventName, args);\n      this.onMessage?.(connectionId, socket, eventName, args);\n    });\n  }\n\n  enforceConnectionLimit() {\n    const activeConnections = Array.from(this.connections.values())\n      .filter(conn => conn.isActive);\n    \n    if (activeConnections.length > this.maxConnections) {\n      // 关闭最旧的连接\n      const oldestConnection = activeConnections\n        .sort((a, b) => a.createdAt - b.createdAt)[0];\n      \n      console.log(`⚠️ 超过连接限制，关闭最旧连接: ${oldestConnection.connectionId}`);\n      this.closeConnection(oldestConnection.connectionId);\n    }\n  }\n\n  getActiveConnection() {\n    const activeConnections = Array.from(this.connections.values())\n      .filter(conn => conn.isActive && conn.connected);\n    \n    if (activeConnections.length > 0) {\n      // 返回最新的活跃连接\n      return activeConnections.sort((a, b) => b.createdAt - a.createdAt)[0];\n    }\n    return null;\n  }\n\n  getAllActiveConnections() {\n    return Array.from(this.connections.values())\n      .filter(conn => conn.isActive && conn.connected);\n  }\n\n  closeConnection(connectionId) {\n    const socket = this.connections.get(connectionId);\n    if (socket) {\n      console.log(`🔌 关闭连接: ${connectionId}`);\n      socket.disconnect();\n      this.connections.delete(connectionId);\n    }\n  }\n\n  closeAllConnections() {\n    console.log('🔌 关闭所有连接');\n    this.connections.forEach((socket, connectionId) => {\n      socket.disconnect();\n    });\n    this.connections.clear();\n  }\n\n  reconnectAll() {\n    console.log('🔄 重连所有连接');\n    this.connections.forEach((socket, connectionId) => {\n      if (!socket.connected) {\n        socket.connect();\n      }\n    });\n  }\n\n  getConnectionStats() {\n    const activeConnections = Array.from(this.connections.values())\n      .filter(conn => conn.isActive && conn.connected);\n    \n    return {\n      totalConnections: this.connections.size,\n      activeConnections: activeConnections.length,\n      userId: this.userId,\n      connections: activeConnections.map(conn => ({\n        connectionId: conn.connectionId,\n        connected: conn.connected,\n        createdAt: conn.createdAt\n      }))\n    };\n  }\n\n  // 事件回调设置方法\n  setEventHandlers(handlers) {\n    this.onConnectionSuccess = handlers.onConnectionSuccess;\n    this.onConnectionLost = handlers.onConnectionLost;\n    this.onConnectionError = handlers.onConnectionError;\n    this.onReconnectionSuccess = handlers.onReconnectionSuccess;\n    this.onReconnectionError = handlers.onReconnectionError;\n    this.onConnectionConfirmed = handlers.onConnectionConfirmed;\n    this.onServerStats = handlers.onServerStats;\n    this.onMessage = handlers.onMessage;\n  }\n}\n\n// 全局连接池实例\nconst connectionPool = new WebSocketConnectionPool();\nexport default connectionPool;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}